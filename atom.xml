<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Paradigm X]]></title>
  <link href="http://paradigmx.net/atom.xml" rel="self"/>
  <link href="http://paradigmx.net/"/>
  <updated>2013-06-02T23:35:45+08:00</updated>
  <id>http://paradigmx.net/</id>
  <author>
    <name><![CDATA[soulhacker]]></name>
    <email><![CDATA[neo@paradigmx.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Toolchain Reloaded]]></title>
    <link href="http://paradigmx.net/blog/2013/04/01/clojure-toolchain-reloaded/"/>
    <updated>2013-04-01T23:45:00+08:00</updated>
    <id>http://paradigmx.net/blog/2013/04/01/clojure-toolchain-reloaded</id>
    <content type="html"><![CDATA[<p><a href="http://clojure.org">Clojure</a> keeps <a href="http://wit.io/posts/clojure-all-grown-up">growning up</a>, and my 2.5-years old <a href="http://7thgen.info/blog/2010/12/clojure-for-mac-os-x/">guide for setting up Clojure environment on Mac OS X</a> had been out-of-date for quite a while. The toolchains based on <a href="https://github.com/technomancy/leiningen">Leiningen 2</a> and <a href="https://github.com/clojure/tools.nrepl">nREPL</a> rise from underground, become really powerful and easy (even joyful for most of us) to use, and de facto standard. Nearly all main stream developing environments provide solutions for serious Clojure developers: <a href="http://eclipse.org">Eclipse</a> + <a href="http://code.google.com/p/counterclockwise/">Counter Clockwise</a>, <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> + <a href="http://www.jetbrains.com/idea/">La Clojure</a>, <a href="http://www.sublimetext.com/2">Sublime Text 2</a> + <a href="http://github.com/wuub/SublimeREPL">SublimeREPL</a>, Vim with <a href="http://clojure-doc.org/articles/tutorials/vim_fireplace.html">fireplace.vim</a>, etc.<sup id='fnref:1'>[<a href='#fn:1' rel='footnote'>1</a>]</sup>, and the favorite I finally found several months ago, <a href="https://github.com/overtone/emacs-live">Emacs Live</a>.</p>

<!-- more -->


<p><em>Emacs Live</em> is brought to us by <a href="https://github.com/samaaron">Sam Aaron</a>, a major developer of <a href="https://github.com/overtone/overtone/">Overtone</a>, the Clojure-based open source live-programmable music exploration &amp; collaboration toolkit<sup id='fnref:2'>[<a href='#fn:2' rel='footnote'>2</a>]</sup>. From <em>Emacs Live</em> documentation:</p>

<blockquote><p>Emacs Live is a carefully curated Emacs config which transforms vanilla Emacs from simply an incredible editor into an intense experience. The key is in the curation. Unlike other exemplary Emacs config tools such as the Starter Kit and Prelude which are very modular, Emacs Live embodies a holistic approach creating an all-round package. We build on the shoulders of giants and incorporate many independent projects, ensuring that they all work together seamlessly.</p><footer><strong>Emacs Live</strong> <cite><a href='http://overtone.github.com/emacs-live/'>A Curated Emacs Experience</a></cite></footer></blockquote>


<p><em>Emacs Live</em> emphasizes the <em>curation</em> of the whole bundle, providing great experiences for out-of-box usage. Some of the best features it packs include:</p>

<ul>
<li>Solid configuration for fundamental Emacs usage, especially Paredit<sup id='fnref:3'>[<a href='#fn:3' rel='footnote'>3</a>]</sup></li>
<li>Well picked and configured Clojure toolkit:

<ul>
<li>With Leiningen as the only dependency, without cluttered configuration files which normal IDEs usually introduce</li>
<li>Built-in <a href="https://github.com/kingtim/nrepl.el">nREPL.el</a> for communicating with nREPL servers</li>
<li>Clojure Mode with fancy (λ a) and ƒ(+ % 5) prettifications</li>
<li>Auto completion support for both Clojure and nREPL buffer with inline documentation display (see it in action below)</li>
<li>Fancy highlighting of sexps on eval; rainbow parens and delimiters</li>
</ul>
</li>
<li>Amazing powerful features like: <a href="http://www.emacswiki.org/emacs/UndoTree">undo-tree</a>, Textmate-like snippets, <a href="http://www.emacswiki.org/emacs/quick-jump.el">quick jump</a> and <a href="http://www.emacswiki.org/emacs/AceJump">Ace Jump</a> mode</li>
</ul>


<p><img src="http://paradigmx.net/images/emacs-live.png" title="My custom Emacs Live in working" ></p>

<p><em>Emacs Live</em> also provides modular customization mechanism called <em>packs</em>. As you can see in the above screenshot, I don&#8217;t like the font and color theme bundled with Emacs Live so I use my favorite <a href="http://www.fsd.it/fonts/pragmatapro.htm">Pragmata Pro coding font</a> and <a href="http://ethanschoonover.com/solarized">Solarized color theme</a>. For people who like a really powerful yet beautiful and elegant developing environment for Clojure, I&#8217;ll describe below how I set up all on Mac OS X in half an hour, step by step.</p>

<h2>Pre-requisites</h2>

<p><strong>OS</strong>: Mac OS X 10.6 or above<br/>
<strong>Java VM</strong>: Java SDK 6 or later</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% uname -a
</span><span class='line'>Darwin matrix.local 12.3.0 Darwin Kernel Version 12.3.0: Sun Jan  6 22:37:10 PST 2013; root:xnu-2050.22.13~1/RELEASE_X86_64 x86_64
</span><span class='line'>% java -version
</span><span class='line'>java version <span class="s2">&quot;1.6.0_43&quot;</span>
</span><span class='line'>Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment <span class="o">(</span>build 1.6.0_43-b01-447-11M4203<span class="o">)</span>
</span><span class='line'>Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM <span class="o">(</span>build 20.14-b01-447, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Emacs</h3>

<p><em>Emacs Live</em> needs vanilla Emacs 24 or above. Which you can get in one of these methods:</p>

<ul>
<li>Download pre-built universal binary from <a href="http://emacsformacosx.com">emacsformacosx.com</a>, mount the image and copy Emacs.app to <code>/Applications</code>.</li>
<li>Use <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, the best package manager for OS X. It&#8217;s as simple as <code>brew install emacs --cocoa</code>.</li>
<li>Download source from GNU Emacs site and build it:</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bzr branch http://bzr.savannah.gnu.org/r/emacs/trunk
</span><span class='line'><span class="nb">cd </span>trunk
</span><span class='line'>./autogen.sh
</span><span class='line'>./configure --with-ns
</span><span class='line'>make bootstrap <span class="o">&amp;&amp;</span> make install
</span><span class='line'>mv nextstep/Emacs.app /Applications
</span></code></pre></td></tr></table></div></figure>


<h3>Leiningen</h3>

<p><em>Leiningen is for automating Clojure projects without setting your hair on fire.</em></p>

<p><em>Emacs Live</em> depends on <em>Leiningen 2</em>. The best way to get <a href="https://github.com/technomancy/leiningen">Leiningen</a> on board is, again, to use <a href="http://mxcl.github.com/homebrew/">Homebrew</a> <code>brew install leiningen</code>.</p>

<p>Of course the <a href="https://github.com/technomancy/leiningen">official method</a> should work fine too:</p>

<ol>
<li><a href="https://raw.github.com/technomancy/leiningen/stable/bin/lein">Download the script</a>.</li>
<li>Place it on your $PATH e.g. <code>~/bin</code> or <code>/usr/local/bin</code></li>
<li>Set it to be executable e.g. <code>chmod 755 ~/bin/lein</code> or <code>chmod 755 /usr/local/bin/lein</code></li>
</ol>


<p>Either way you can verify it by issuing<sup id='fnref:4'>[<a href='#fn:4' rel='footnote'>4</a>]</sup>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% lein -v
</span><span class='line'>Leiningen 2.1.2 on Java 1.6.0_43 Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM
</span></code></pre></td></tr></table></div></figure>


<h3>Cleanup</h3>

<p>If you are already Emacs user, which means that most likely you already have an <code>.emacs</code> config file and lots of stuff in <code>.emacs.d</code> folder under your home <code>~/</code>. In this case before going any further you have to backup all of them for later use.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p ~/Desktop/Emacs.backup
</span><span class='line'>mv ~/.emacs ~/.emacs.d ~/Desktop/Emacs.backup
</span></code></pre></td></tr></table></div></figure>


<h2>Emacs Live</h2>

<p>There are several methods to install <em>Emacs Live</em>. But here is my favorite:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/
</span><span class='line'>git clone git://github.com/overtone/emacs-live.git ~/.emacs.d
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it. Now you can try it by simply launching <code>Emacs.app</code> from your <code>/Applications</code> folder. You&#8217;d better not touch the <code>~/.emacs.d</code> folder from now on, so you can update <em>Emacs Live</em> anytime you want by issuing <code>git pull</code> in this folder.</p>

<p>All following steps are for more customization, and <em>optional</em>.</p>

<h2>Emacs Live Customization</h2>

<h3>Create Custom User Pack</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir ~/.live-packs
</span><span class='line'>cp -R ~/.emacs.d/packs/template/user-template-pack ~/.live-packs/yourname-pack
</span></code></pre></td></tr></table></div></figure>


<p>The folder name <code>yourname-pack</code> can be anything you&#8217;d like. Mine is <code>neo-pack</code> and you can have it as reference on <a href="https://github.com/neolee/neo-pack">GitHub</a>.</p>

<h3>User Pack Structure</h3>

<ul>
<li><code>config</code>: Folder for Emacs config files. Typically a <code>bindings.el</code> for keybindings (which is already there), and a <code>yourname-conf.el</code> for your custom setting (which is not exist by default). I created a <code>config/neo-conf.el</code> and imported most of my settings from the old <code>~/.emacs</code> file, which you can find <a href="https://github.com/neolee/neo-pack/blob/master/config/neo-conf.el">here</a>.</li>
<li><code>lib</code>: Folder for Emacs mods. Put stuffs from old <code>.emacs.d</code> folder into it and load them like this (in <code>init.el</code> or any scripts under <code>config</code> folder):</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">live-add-pack-lib</span> <span class="s">&quot;some-great-mod&quot;</span><span class="p">)</span> <span class="c1">; some-great-mod is sub-folder under lib folder</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;great-mod-init</span><span class="p">)</span>            <span class="c1">; great-mod-init.el is script under sub-folder some-great-mod</span>
</span><span class='line'><span class="p">(</span><span class="nf">great-mod</span><span class="p">)</span>                          <span class="c1">; great-mod is some function in great-mod-init.el</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>init.el</code>: Entry script of the pack. Mostly something like:</li>
</ul>


<figure class='code'><figcaption><span>init.el </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; Load bindings config</span>
</span><span class='line'><span class="p">(</span><span class="nf">live-load-config-file</span> <span class="s">&quot;bindings.el&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Custom settings</span>
</span><span class='line'><span class="p">(</span><span class="nf">live-load-config-file</span> <span class="s">&quot;yourname-conf.el&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>info.el</code>: Meta data of the user pack.</li>
<li><code>README.md</code>: Helpful info for user pack customization.</li>
</ul>


<h3>Import 3rd Party Pack</h3>

<p>The built-in <code>cyberpunk</code> color theme bundled with <em>Emacs Live</em> is amazing, but I love the epic Solarized color theme all the time. Fortunately an <em>Emacs Live</em> user has made a <a href="https://github.com/siancu/solarized-pack">reusable pack</a> for it<sup id='fnref:5'>[<a href='#fn:5' rel='footnote'>5</a>]</sup>. Simply import it from GitHub:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/.live-packs
</span><span class='line'>git clone git://github.com/siancu/solarized-pack.git
</span><span class='line'><span class="nb">cd </span>solarized-pack
</span><span class='line'>git submodule init
</span><span class='line'>git submodule update
</span></code></pre></td></tr></table></div></figure>


<h3>Tell Emacs to Load User Packs</h3>

<p><em>Emacs Live</em> uses <code>~/.emacs-live.el</code> to load user packs. So we need to create a <code>~/.emacs-live.el</code> file and put these lines in it:</p>

<figure class='code'><figcaption><span>.emacs-live.el </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">live-use-packs</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">live/foundation-pack</span>     <span class="c1">; Use live-use-packs to control which built-in packs should be loaded</span>
</span><span class='line'>                  <span class="c1">; live/colour-pack       ; This built-in pack MUST be disabled if you want to use 3rd party color theme pack</span>
</span><span class='line'>                  <span class="nv">live/clojure-pack</span>
</span><span class='line'>                  <span class="nv">live/lang-pack</span>
</span><span class='line'>                  <span class="nv">live/power-pack</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">live-add-packs</span> <span class="o">&#39;</span><span class="p">(</span><span class="o">~</span><span class="nv">/.live-packs/neo-pack</span>   <span class="c1">; Use live-add-packs to load custom packs</span>
</span><span class='line'>                  <span class="o">~</span><span class="nv">/.live-packs/solarized-pack</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Final Tweaks</h2>

<h3>Emacs Launching Time</h3>

<p><em>Emacs Live</em> is extremely powerful and thus cause rather long Emacs starting time as trade-off. Fortunately Emacs has standard solution for this problem: the Emacs daemon and <code>emacsclient</code>. Just add these aliases in your shell startup script (e.g. my <code>~/.zshrc</code>):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">es</span><span class="o">=</span><span class="s1">&#39;/Applications/Emacs.app/Contents/MacOS/Emacs --daemon&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">emacs</span><span class="o">=</span><span class="s1">&#39;/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -c -n&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can firstly launch the Emacs server daemon by issuing <code>es</code> in shell (only once), after which you can instantly open Emacs editor by <code>emacs &lt;filename&gt;</code>.</p>

<h3>Connecting to nREPL</h3>

<p><em>Emacs Live</em> provides <em>nREPL</em> integration through <code>nrepl.el</code>. To use that you can choose one of two ways.</p>

<h4>Jacking In</h4>

<p>The simplest way to get <em>Emacs Live</em> connected with a Clojure process is to use <code>M-x nrepl-jack-in</code> command. This allows you to connect to a specific <em>Leiningen</em> project which therefore ensures that all the project dependencies defined in the project’s <code>project.clj</code> are available on the JVM classpath.</p>

<p>In order to communicate with the correct project, you should summon <code>M-x nrepl-jack-in</code> whilst the active buffer displaying file which is part of the <em>Leiningen</em> project you wish to connect to. This will then spawn <code>lein repl :headless</code> as an external shell process and automatically connect to it.</p>

<h4>Manually Connection</h4>

<p>Another option for connecting to an <em>nREPL</em> process is to manually start a <em>Leiningen</em> REPL by <code>cd</code>ing to the project folder and issuing the command <code>lein repl</code>. This will start a REPL on the terminal, but also tell you which port <em>nREPL</em> is listening on i.e.:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nREPL server started on port 62132
</span></code></pre></td></tr></table></div></figure>


<p>Then use <code>M-x nrepl</code> command in Emacs and feed it with <code>127.0.0.1</code> (default) host and <em>right</em> port, which should have been printed in the shell output of <code>lein repl</code> command. In the case shown above the <em>right</em> port is 62132. Soon you will get annoyed by looking for this random port number and paste it to Emacs <code>M-x nrepl</code> prompt. Fortunately we can ask the nREPL server to listen to the default 4555 port by adding a custom <code>lein</code> command in <code>~/.lein/profiles.clj</code>:</p>

<figure class='code'><figcaption><span>profiles.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:live-repl</span> <span class="p">{</span><span class="ss">:repl-options</span> <span class="p">{</span><span class="ss">:port</span> <span class="mi">4555</span><span class="p">}}</span>
</span><span class='line'> <span class="ss">:user</span> <span class="p">{</span><span class="ss">:aliases</span> <span class="p">{</span><span class="s">&quot;live&quot;</span> <span class="p">[</span><span class="s">&quot;with-profile&quot;</span> <span class="s">&quot;default,live-repl&quot;</span> <span class="s">&quot;repl&quot;</span><span class="p">]}</span>
</span><span class='line'>        <span class="ss">:dependencies</span> <span class="p">[</span><span class="nv">...</span><span class="p">]}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can issue <code>lein live</code> command under the project folder, which will start a normal <em>nREPL</em> session, but this time it will always be listening on port 4555. Connecting from Emacs is now just a matter of <code>M-x nrepl RET RET</code>.</p>

<h2>FAQ</h2>

<p><em>Emacs Live</em> is being very actively developed and with relatively little <a href="http://overtone.github.com/emacs-live/documentation.html">documentation</a>. Here are some tricks I used in my pack, which may be updated from time to time.</p>

<p><strong>Q: Why is my custom color theme overrided by Emacs Live built-in theme?</strong> <br/>
A: You have to disable the built-in <code>live/colour-pack</code> to use custom color theme, as shown in the <em>Tell Emacs to Load User Packs</em> section above.</p>

<p><strong>Q: How to use my favorite font instead of the default one?</strong> <br/>
A: Modify <code>default-frame-alist</code> in <code>conf/yourname-conf.el</code> under your user pack (<code>~/.live-packs/yourname-pack</code>):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;default-frame-alist</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">font</span> <span class="k">. </span><span class="s">&quot;PragmataPro 14&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Q: How to customize my cursor color?</strong> <br/>
A: Modify <code>default-frame-alist</code> in <code>conf/yourname-conf.el</code> under your user pack:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;default-frame-alist</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">cursor-color</span> <span class="k">. </span><span class="s">&quot;palegoldenrod&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Q: I want the highlight current line feature back!</strong> <br/>
A: After disabling the built-in <code>live/colour-pack</code> (see the first question above) you will lose the <em>highlight current line</em> feature as a side effect (since it&#8217;s defined in that pack). But it&#8217;s very easy to add it back, by adding the following line to <code>conf/yourname-conf.el</code> under your user pack:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">global-hl-line-mode</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8211;</p>

<div class="footnotes">
    <ol>
        <li id='fn:1'><p> See the <a href="http://dev.clojure.org/display/doc/Getting+Started">Getting Started</a> guide in the official dev wiki for more. But note that many info in it are deprecated (e.g. Netbeans and Enclojure, Swank Clojure for Emacs, VimClojure, etc.).
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p> Overtone is extremely amazing and I highly suggest to have a try. Or you can see the <a href="http://vimeo.com/22798433">video</a> (Emacs Live in action!) to get some idea.
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p> IMHO, <a href="http://emacswiki.org/emacs/ParEdit">Paredit</a> is one of the key reasons which makes Emacs the best editor for all LISP dialects. See this <a href="http://www.slideshare.net/mudphone/paredit-preso">perfect guide</a> if not familiar with paredit.el.
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p> If choosing the official method while running <code>lein -v</code> the first time it will download all dependencies for Leiningen, and then print out the version info.
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p> Studying this simple user pack example can make building your own pack, especially color-theme pack as easily as Copy and Paste.
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7]]></title>
    <link href="http://paradigmx.net/blog/2013/01/29/ios-7/"/>
    <updated>2013-01-29T23:55:00+08:00</updated>
    <id>http://paradigmx.net/blog/2013/01/29/ios-7</id>
    <content type="html"><![CDATA[<p>In my opinion, the major tasks for Apple in this year are all about software, especially in the iOS eco-system.</p>

<p>iOS has very solid Unix foundation and decent application framework. For a long time iOS had incontrovertible advantages over its rivals: performance, security, smooth user interaction, etc., most of which are still advantages today. But we all know that some incapabilities in iOS, especially compared to Android, are becoming more and more important aspects that Apple cannot ignore. Consider the following facts: Android may not be rendering the UI animation as smoothly as iOS always does, but it&#8217;s been getting better and better since Android 4.0, while iOS still doesn&#8217;t allow third-party apps customize the lock screen or put widgets on any part of the main UI. See the difference? Android&#8217;s problems are &#8216;not as good as iOS&#8217; and iOS has some <em>incapabilities</em>. If Apple want more people to choose iOS it should persuade the swing people (not the fans) that <em>iOS is better in all aspects</em>. It&#8217;s a prerequisite to eliminate those incapabilities ASAP.</p>

<p>Ars Technica <a href="http://arstechnica.com/apple/2013/01/bring-us-the-features-an-ars-staff-wish-list-for-ios-7/">posted their staff wish list for iOS 7</a> last week. Most features in their list are <em>good</em> ones but not the <em>critical</em> ones. Base on the above <em>eliminating incapabilities</em> theory I&#8217;ll list mine below, divided to developer and user categories.</p>

<!-- more -->


<h2>Wish List as a Developer</h2>

<h3>1. Inter-app Communication</h3>

<p><img class="left" src="http://paradigmx.net/images/ios-7-wishlist/cameraplus.png" width="180" height="284" title="Calling Camera+ from Tweetbot" ></p>

<p>Cocoa provides very powerful and elegant inter-process communication solution on Mac OS X: <code>NSDistributedNotificationCenter</code> and <code>NSPortNameServer</code>, but none is available on iOS (for third-party apps at least). <a href="http://api.camerapl.us/app-api">Inspired by</a> the popular photography app Camera+, many apps use shared system clipboard and <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/iPhone/Conceptual/iPhoneOSProgrammingGuide/AdvancedAppTricks/AdvancedAppTricks.html#//apple_ref/doc/uid/TP40007072-CH7-SW50">custom URL schemes</a> to <em>simulate</em> a cross-app call with custom data. Following this approach Apple can easily develop a secure, simple but powerful solution.</p>

<p><img class="right" src="http://paradigmx.net/images/ios-7-wishlist/share-panels.jpg" width="360" title="Share Panel in iOS and Android" ></p>

<p>The <a href="http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIActivityViewController_Class/Reference/Reference.html#//apple_ref/occ/cl/UIActivityViewController">UIActivityViewController</a> API introduced in iOS 6 is a high level interface for inter-app data sharing. It&#8217;s similar to Android&#8217;s &#8220;Share&#8230;via&#8221; interface, but not allow third-party apps to add system level services (app level services are allowed, see this <a href="http://stackoverflow.com/questions/12546574/using-apple-icons-with-ios-6">StackOverflow question</a> for details). This is another improvement opportunity for Apple.</p>

<h3>2. Widget API</h3>

<p>Widgets may bring trouble (drained battery, inconsistent user interaction, etc.) but still useful and sometimes very attractive. There are several parts of iOS&#8217;s system UI that are calling for custom widgets: the lock screen, the notification center, and the multitasking bar (actually we already have some <a href="http://www.theverge.com/2012/10/4/3451322/rethinking-the-app-switcher-for-the-iphone-5-mockups">impressive mockup</a> for this one).</p>

<p>For now all these UI parts are running inside the Springboard process. Apple must move them into independent processes before allowing third-party widgets running within them. Then Apple should push some strict guideline for widget development (just like multitasking). Finally open a front page section in the App Store and Boom! Everybody will be happy with it.</p>

<p><img src="http://paradigmx.net/images/ios-7-wishlist/widgets.jpg" width="600" title="iOS Widgets?" ></p>

<h3>3. Siri API</h3>

<p>This one is easy to describe: open APIs of Siri, let us develop plugins for Siri and make her a real goddess. Third-party apps can facilitate Siri&#8217;s advanced voice recognition and text-to-speech engine, response to Siri commands and integrate content into Siri&#8217;s search result. It will bring a whole new world in.</p>

<h3>4. A Better App Store</h3>

<p>App Store is good, App Store changed the world, App Store brings money to the happy developers. But App Store desperately needs these (thank <a href="https://twitter.com/GossipSama">@GossipSama</a> for insightful addition):</p>

<ul>
<li><strong>Incremental update for apps</strong>. Enough said.</li>
<li><strong>Better IAP flow</strong>. The standard flow today is fragile: app connect to iTunes to let user purchase; app connect to its own server to log the purchased token; app server connect to Apple&#8217;s IAP server for verification; etc. If user quits app during some steps or app server fails on IAP server, the transaction will fail and may leave incomplete state in the system. A one step server-to-server workflow will be life changer for developers who highly rely on the IAP mechanism.</li>
<li><strong>Account statement</strong>. Developers need detail account statements for many reasons: fix failed payments, find cheating users, etc.</li>
<li><strong>App promoting policy</strong>. Developers need more transparency on app recommendation and sorting mechanism, and a clean policy for app promoting (can and cannot do, good and evil behaviors and so on).</li>
</ul>


<h2>Wish List as a User</h2>

<p>First of all, most features listed in the previous part can extremely benefit all users. Users will get a shiny new iOS with powerful new features like:</p>

<ul>
<li>Bluetooth/WiFi/3G/Screen Rotation Lock toggles right in the multitasking bar.</li>
<li>Event and weather display in the lock screen.</li>
<li>Sending any link from any apps to Instapaper (even the apps without builtin support for Instapaper).</li>
<li>Beautiful, secure, reliable widgets in App Store to customize iOS.</li>
<li>Much more apps in the App Store with Siri integration.</li>
<li>Faster app updating and more robust IAP purchase.</li>
<li>More easily to find good apps.</li>
</ul>


<p>Beside these we also have the following:</p>

<h3>1. iTunes Account Merge</h3>

<p>If you have more than one iTunes account (e.g. Japanese have many exclusive, excellent music and games!) you are in trouble. You have to manually log off and log on to each of your accounts to check app updates. And when you want to do some IAP you have to confirm (manually again) that you are currently logged on to the account from which you originally bought the app.</p>

<p>iOS and iTunes should make it better.</p>

<h3>2. Better Arranged System Setting</h3>

<p>Tell me where is the Auto-Lock setting in 5 seconds. Can you do that? Yes? And how to turn off iCloud sync for document and iTunes Match under cellular network, huh?</p>

<h3>3. More Useful Gestures</h3>

<p><a href="http://gigaom.com/2012/04/02/how-to-use-ipad-multitasking-gestures-and-why-you-should/">Multitasking Gestures</a> on iPad is good, please fine-tune and bring them to iPhone. Further more, Apple should seriously consider the jailbreak system add-on Activator and bring more useful gestures to iOS. So people can forget the ugly AssistiveTouch button.</p>

<h3>4. Multiple User Profiles on a Device</h3>

<p>Sharing iPad in a family is very common. By supporting multiple profile and user switch the children will have more chance to use the iDevice, and more likely buy their own sooner or later.</p>

<p>So what do you think? Share your wishes in the comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Brief Guide of (RESTful) SOA, Part III]]></title>
    <link href="http://paradigmx.net/blog/2012/10/18/a-brief-guide-of-restful-soa/"/>
    <updated>2012-10-18T15:47:00+08:00</updated>
    <id>http://paradigmx.net/blog/2012/10/18/a-brief-guide-of-restful-soa</id>
    <content type="html"><![CDATA[<p><a href="http://paradigmx.net/blog/2012/04/27/a-brief-guide-of-restful-soa-part-i/">Part I</a> <a href="http://paradigmx.net/blog/2012/10/17/a-brief-guide-of-restful-soa-part-ii/">Part II</a></p>

<p>In the final part of this article we will discuss several common topics of RESTful web service implementation. I will not dig deep here because all these topics are all quite complicated.</p>

<!-- more -->


<h2>Level IV: RESTful Service Implementation</h2>

<h3>4.1 Reference Architecture</h3>

<p><img class="left" src="http://paradigmx.net/images/restful-service-architecture-01.jpg" width="512" height="384" title="Reference Architecture" ></p>

<p>The architecture shows several good start points:</p>

<ul>
<li><strong>Layered system</strong>: simple but strict layered system gives reusable and loose-coupled architecture. Every layer in this architecture should able to scale independently.</li>
<li><strong>Representation layer</strong>: a <em>facade</em> to handle all API requests consistently. Nearly all the common tasks can be centralised here. See section 4.2 below for detail.</li>
<li><strong>State/transfer layer</strong>: a mid-tier to contain all business logic, including business object and flow abstraction, and the access layers for all back-end resource.</li>
<li><strong>Resource layer</strong>: can be any resource used in the system. e.g. platform data (structured or unstructured), external data port, adaptors to other resource APIs, etc.</li>
<li><strong>Caches</strong>: cache any cacheable things. Design a consistent mechanism to manage the caches.</li>
<li><strong>Workers</strong>: many things should be handled automatically and asynchronously. Build a job system to schedule and manage all automatic workers.</li>
</ul>


<h3>4.2 Facade</h3>

<p>An API facade is a centralised entry for all API requests. Requests are pre-processed here and routed to proper business handlers. Return data are also rendered here, as exactly described in the API specs, and response to the client.</p>

<p>Nearly all the common tasks can be centralised here:</p>

<ul>
<li><em>Authentication</em>, <em>authorisation</em> and <em>auditing</em> (3A)</li>
<li>Rate limiting</li>
<li>Parameters parsing and checking</li>
<li>Return data rendering</li>
<li>Statistics and analysis</li>
</ul>


<p>All these tasks are business independent. Actually they are mostly <a href="http://en.wikipedia.org/wiki/Cross-cutting_concern">cross-cutting concerns</a>. For better <a href="http://en.wikipedia.org/wiki/Separation_of_concerns">separation of concerns</a> they should be separated from the main business part and consolidated to a centralised place.</p>

<p>Note that for performance reason some should run asynchronously from the main request/response flow.</p>

<h3>4.3 Scaling</h3>

<p><img class="right" src="http://paradigmx.net/images/restful-service-architecture-05.jpg" width="512" height="384" title="Scaling" ></p>

<p>A well-designed layer system can guarantee independent scaling per every layer. In the reference architecture:</p>

<ul>
<li>The front-end can be horizontally extended by adding a front-end load balancer.</li>
<li>The business logic can be horizontally extended by adding a service router and coordinator. By doing this you can even make some intelligent system to dynamic adjust service load via requests stats.</li>
<li>The data is the hardest part to be extended, especially for traditional RDBMS. But you can use any mature mechanism to make life better: partitioning, sharding, clustering etc. Another very popular solution is to separate some highly active data and put them into Redis (or other NoSQL system).</li>
</ul>


<p>Most best practices on Internet-scale services are fully applicable to RESTful services. Just remember to keep an eye on the <a href="http://paradigmx.net/blog/2012/04/27/a-brief-guide-of-restful-soa-part-i/">core principles</a> of REST all the time.</p>

<h2>Extended Readings</h2>

<p>RESTful web services are not traditional web sites but they share most characteristic features of Internet software architecture. If you are an architect but new to Internet-scale services architecture James Hamilton&#8217;s <a href="http://static.usenix.org/event/lisa07/tech/full_papers/hamilton/hamilton_html/">classic thesis</a> is a must-read.</p>

<p>For new software architects this <a href="http://gorban.org/post/32873465932/software-architecture-cheat-sheet">cheat sheet</a> is a good start.</p>

<p>With very similar goal to this 3-parts article, Matt Gemmell has written <a href="http://mattgemmell.com/2012/05/24/api-design/">very good guide</a> for API design and implementation (a little later than my first part). It has very different structure and focus from mine and is definitely another must-read.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Brief Guide of (RESTful) SOA, Part II]]></title>
    <link href="http://paradigmx.net/blog/2012/10/17/a-brief-guide-of-restful-soa-part-ii/"/>
    <updated>2012-10-17T20:53:00+08:00</updated>
    <id>http://paradigmx.net/blog/2012/10/17/a-brief-guide-of-restful-soa-part-ii</id>
    <content type="html"><![CDATA[<p>In the <a href="http://paradigmx.net/blog/2012/04/27/a-brief-guide-of-restful-soa-part-i/">first part of this series</a> we have discussed the core concepts of RESTful architectural style and gives some guideline in how to define the system and prepare for defining the APIs specs, which will be covered in this part.</p>

<h2>Level III: Define and Tune the API</h2>

<p>Defining API specs is the most important part of all and it&#8217;s a continuous progress in the whole lifecycle, mostly documentation oriented. A simple and neat document collaboration platform is very useful. I suggest facilitating tools such as <a href="http://www.mediawiki.org/">MediaWiki</a> or <a href="http://daringfireball.net/projects/markdown/">Markdown</a> + <a href="https://github.com">GitHub</a> etc. Then you can follow these sections below.</p>

<!-- more -->


<h3>3.1 API Basics</h3>

<p>Use one or two pages to list basic information of the API system, including (but not constrained to):</p>

<ul>
<li><strong>General</strong>: general style and policy, versioning, request and response methods, i18n, etc.</li>
<li><strong>Authorisation</strong>: step by step tutorial on connecting to the service (see section 3.2 below).</li>
<li><strong>Request</strong>: all acceptable request formats w/ examples.</li>
<li><strong>Response</strong>: response format w/ examples, error codes.</li>
<li><strong>Misc</strong>: rate limits, auditing, etc.</li>
</ul>


<h3>3.2 One Token to Rule Them All</h3>

<p>Remember that for most developers using your APIs the most tricky part is the authentication and authorisation. For some reasons (compromise of security, performance and convenience) most web service systems use <code>token</code> to identify service clients. Here are some fundamental concepts:</p>

<ul>
<li><strong>Service</strong>, or the <strong>platform</strong> is the system hold the key resources and make resources accessible via some open APIs.</li>
<li><strong>Client</strong>, or <strong>app</strong> is client application sending request to the <strong>service</strong>.</li>
<li>Each of every <strong>client</strong> should <em>register</em> itself on the <strong>service platform</strong> and gain a pair of CLIENT_ID and CLIENT_SECRET to identify itself.</li>
<li>After registration <strong>apps</strong> can request tokens from the <strong>platform</strong></li>
<li>There are 2 types of <strong>services</strong> in most <strong>platform</strong>: (A) services related to a specific <em>user</em> in the platform; (B) services independent to <em>users</em>. They need different kinds of tokens:

<ul>
<li>For type (A): <strong>app</strong> should use its CLIENT_ID/CLIENT_SECRET, correlated user&#8217;s ID and expected access profile (commonly called &#8217;<em>scope</em>&#8217;) to request the access token.</li>
<li>For type (B): <strong>app</strong> should use its CLIENT_ID/CLIENT_SECRET and <em>scope</em> to request the access token.</li>
</ul>
</li>
<li>As long as the access token issued to the <strong>app</strong>, <strong>app</strong> can use it to request designated service APIs， until the token expires or revoked by <strong>platform</strong> or <strong>app</strong> or the <em>user</em>.</li>
</ul>


<p>In many cases the <strong>platform</strong> cannot issue type (A) token to an <strong>app</strong> unless correlated user explicitly approve the request. That&#8217;s where OAuth-like mechanisms make sense. In such cases, when <strong>platform</strong> receives request for issuing a token to some user, it will redirect the user to a page showing Approve/Decline buttons and continue the flow after the user explicitly approve the request. For detail info about the widely uses OAuth v2 protocol refer to the official <a href="http://tools.ietf.org/html/rfc6749">IETF RFC6749 document</a>.</p>

<p>A platform should choose mechanism wisely and make the flows (app registration, token issuing/revoking/managing, etc.) clean, flexible and friendly to all potential client apps. Useful tutorials about all these flows are required.</p>

<h3>3.3 API Taxonomy</h3>

<p><strong>An API taxonomy</strong> can help to organise all APIs. It gives you and your clients&#8217; developers very clean and structural view of your continuously evolving APIs. It also gives you a way to normalise the API endpoints&#8217; URI patterns.</p>

<p>API taxonomy is highly dependent to the business. But some general rules certainly helps:</p>

<ol>
<li>The response objects, which are defined in the <a href="http://paradigmx.net/blog/2012/04/27/a-brief-guide-of-restful-soa-part-i/">first part</a> of this article, are usually the <em>first dimension</em> of the taxonomy.</li>
<li>The <em>second dimension</em> is usually related to the API URI patterns, which will described below.</li>
</ol>


<p>So let&#8217;s look at some typical RESTful URI patterns.</p>

<ul>
<li><strong>Object</strong>

<ul>
<li><code>/:type</code> e.g. <code>/user</code>: Request this URI by <code>POST</code> will create a new object of designated type and return the object if succeeded.</li>
<li><code>/:type/:id</code> e.g. <code>/user/2234</code>: Request this URI by <code>GET</code> <code>PUT</code> <code>DELETE</code> will fetch, change or delete designated object.</li>
</ul>
</li>
<li><strong>Query</strong>

<ul>
<li><code>/:type/:catalog</code> e.g. <code>/user/all</code> <code>/user/query?name=foo</code>: Return one or more objects of designated type (using criteria in query string if needed).</li>
</ul>
</li>
<li><strong>Aspect</strong> or <strong>Attribute</strong>

<ul>
<li><code>/:type/:id/:aspect</code> e.g. <code>/user/1532/friends</code> <code>/user/1532/pets</code>: Return zero or more objects of some type related to designated object. In our examples, user #1532&#8217;s friends should be zero or more <em>user</em> objects, and user #1532&#8217;s pets should be zero or more <em>pet</em> objects.</li>
</ul>
</li>
<li><strong>Action</strong>

<ul>
<li><code>/:type/:id/:action</code> e.g. <code>/user/1532/follow</code> <code>/user/1532/report</code>: Perform certain action (<em>follow</em> somebody or <em>report</em> them as spam) to designated object.</li>
</ul>
</li>
</ul>


<p>As you can see, The last pattern is not so RESTful. A far more RESTful way to do things like <em>following somebody</em> may be: define an object type <code>relationship</code> and provide <code>POST /relationship</code> (with user A and B as parameters) to add a new relationship.</p>

<p>All I can say is that both ways will work fine in most systems and I leave the decision up to you.</p>

<p>Using <em>object type</em> and <em>pattern</em> as two dimensions of the API taxonomy is a very good start point. Almost all RESTful web service systems can put API endpoints into a matrix like below:</p>

<p><table>
  <tr>
    <th>Object</th>
    <th>Query</th>
    <th>Aspect</th>
    <th>Action</th>
  </tr>
  <tr>
    <td>user</td>
    <td>search</td>
    <td>friends<br />pets</td>
    <td>follow</td>
  </tr>
  <tr>
    <td>pet</td>
    <td>search<br />cats<br />dogs</td>
    <td>master<br />cousins</td>
    <td>gift</td>
  </tr>
  <tr>
    <td>house</td>
    <td>search</td>
    <td>residents</td>
    <td></td>
  </tr>
</table></p>


<p>Well, some special APIs will be hard to classify. Here are the most commonly used two (we won&#8217;t discuss more, just list them here):</p>

<ul>
<li><code>compound</code>: combine several API requests into a batch and response the batch results altogether.</li>
<li><code>realtime</code> or <code>stream</code>: stream realtime activity logs to the client, which needs very different mechanism to work out.</li>
</ul>


<h3>3.4 API Specs</h3>

<p>For every endpoints in the API matrix you need a consistent and clean spec which follows these rules:</p>

<ul>
<li><strong>Endpoint</strong>: basic info for calling the endpoint (complete URI, HTTP verbs, security options, etc.).</li>
<li><strong>Parameters</strong>: list of all parameters, each of which should include <em>name</em>, <em>example</em>, <em>description</em>, <em>required or optional</em> and other useful information.</li>
<li><strong>Response</strong>: all data fields in the response data. Each fields can be some plain value or a pre-defined business object structure, as described in the <a href="http://paradigmx.net/blog/2012/04/27/a-brief-guide-of-restful-soa-part-i/">first part</a> of this article.</li>
<li><strong>Examples</strong>: clickable examples of calling this endpoint (see section 3.5 below).</li>
</ul>


<p>Here is a good documentation example from <a href="https://foursquare.com">foursquare</a> platform: <a href="https://developer.foursquare.com/docs/checkins/add">create a check-in</a>.</p>

<h3>3.5 Test the Specs</h3>

<p>To give app developers&#8217; and yourself a better life, you need an API test console from the first day. It can be a command line tool or a GUI tool or, the easiest and most convenient way, a browser based tool. In the test console user can input token and API endpoint, choose HTTP verb, input parameters and get 100% real response data, in nicely formatted JSON format. It can save tons of time and money. Have a look at foursquare&#8217;s <a href="https://developer.foursquare.com/docs/explore#req=users/self">online API explorer</a> for some real world example.</p>

<p>Further more, an automatic regressive testing solution should be considered as early as possible. Web services are entries of your business and API implementation will surely be in a continuously developing progress. After any changes a series of strict tests must be automatically executed to confirm that all APIs are still working as intended. Use a high productivity dynamic language such as Ruby or Python to write a simple but complete client lib for your APIs and build test case for every defined API endpoints. Personally I like Ruby w/ RSpec but many other languages and frameworks also work fine.</p>

<p><strong>To be continued&#8230;</strong></p>

<p>In the final part of this series we will talk about implementation of the API specs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Europe Summer 2012 and 500px]]></title>
    <link href="http://paradigmx.net/blog/2012/09/18/europe-summer-2012-and-500px/"/>
    <updated>2012-09-18T14:18:00+08:00</updated>
    <id>http://paradigmx.net/blog/2012/09/18/europe-summer-2012-and-500px</id>
    <content type="html"><![CDATA[<p>I spent my summer vacation with my family in Germany, Austria and Switzerland. It&#8217;s the first time I visit Europe. Had bunch of photos, most of which are taken by my Fujifilm Finepix X100 with its wide conversion lens WCL-X100. After one and half months I finally picked up <a href="http://500px.com/soulhacker/sets/europe_tour_2012">~150 photos</a> and uploaded them to 500px.</p>

<p>X100 is a really amazing camera. Its <a href="http://www.dxomark.com/index.php/en.../Cameras/Camera-Sensor-Database/Fujifilm/FinePix-X100">top-of-the-line</a> APS-C sized CMOS sensor provides great resolution and SNR. Its prime lens (with field of view equivalent to 35mm and 28mm lens on full frame) are especially suitable for landscape and cultural photography. iPhone 4S is a great backup, provide fairly good photos even in some typically difficult scenarios for compact DCs. Remember all these are very lightweight. Farewell my big DSLRs. <em>The best cameras are the ones you always take with you.</em></p>

<p>As for the digital darkroom, Aperture is a perfect tool both on organising and editing. And the <a href="https://github.com/iKenndac/500px-Aperture-Uploader/">500px Uploader</a> developed by iKenndac significantly simplifies the process of uploading photos to 500px. But I have some serious suggestions for 500px. Yep, this is the real reason I wrote this blog.</p>

<!-- more -->


<p>First of all, please provide full support to all high DPI displays, i.e. iPhone 4/4S/5, the latest iPad and the MBP with Retina Display. You are a professional photography site and you have to support the best display devices in this planet, don&#8217;t you? It feels very bad when I see those low resolution photos in the shiny Retina Display MBP, especially when I&#8217;ve uploaded all the full resolution(12MP) images.</p>

<p>Second, re-design your site navigation please. Think about it, user has profile, sets and stories. When I dig into some photo I want clear path to get out (e.g. back to a set or story). And I&#8217;d like some shortcut to quickly navigate between my sets and stories. The site&#8217;s navigation design does not exist, for now.</p>

<p>Third, the Organizer should be designed for batch operation. We can only drag one photo at a time. I uploaded several hundreds photos and had to drag several hundreds times to move them to specific sets. How could it work sir?</p>

<p>The last but not least. Why add some grey corner to the photo thumb in the set view? Just to put the shopping cart icon there? Do you know that the grey corners are most common flaws of photos? The grey corners make my photos look flawed and it&#8217;s not cool.</p>

<p>If I have time I can list more issues on 500px&#8217;s function and interaction design. But I think the ones listed are more than enough.</p>

<p>Actually 500px has some very good sense and idea on high quality photo sharing and exchanging. But the bad user experience (although the UI is beautiful and fairly responsive) and slow development may kill it. I&#8217;m a Plus member for a while but I highly doubt that I will upgrade to Awesome without seeing some significant changes on the site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WANTED: Image Website Tool Not Suck]]></title>
    <link href="http://paradigmx.net/blog/2012/05/01/wanted-image-website-tool-not-suck/"/>
    <updated>2012-05-01T12:28:00+08:00</updated>
    <id>http://paradigmx.net/blog/2012/05/01/wanted-image-website-tool-not-suck</id>
    <content type="html"><![CDATA[<p>Per my 13-years old daughter&#8217;s request I&#8217;m searching for some tools to build her own image website, so she can publish and manage all her drawings and photos. To my surprise after all these years there are still very few such tools that not sucks.</p>

<p><a href="http://gallery.menalto.com/">Gallery</a>, <a href="http://piwigo.org/">Piwigo</a>, <a href="http://www.zenphoto.org/">Zenphoto</a>, <a href="http://www.e2interactive.com/e2_photo_gallery/">E2 Photo Gallery</a>, etc. They are old, powerful and actively developed. But all of them are so <em>last-century</em>. They are ancient content manage systems and just not work for modern creative artists, like  my daughter of cause. Here is <em>my requirements</em>:</p>

<ul>
<li>Free and open source (optional)</li>
<li>Easy to deploy to shared hosting service and/or VPS</li>
<li>Easy-to-use uploading tool which supports single and multiple files</li>
<li>Support imagesets (&#8220;albums&#8221;)</li>
<li>Support tags</li>
<li>Manageable commenting and rating system (built-in or integration with Disqus)</li>
<li>Support direct hyperlinks to the images (can be toggled on/off per album based)</li>
<li>Sharing button for Twitter and other social networks</li>
<li>Automatically EXIF/IPTC handling</li>
<li>Thumbnail view with AJAX based in-place zooming and editing (for meta info)</li>
<li>Cool built-in themes (at lease 2 for dark and light backgrounds), simple but working customizing system</li>
<li>Support iPhone <em>and</em> iPad-size mobile devices</li>
<li>Support i18n</li>
<li>Easy to backup/restore or export/import</li>
<li>Acceptable performance for hundreds of images</li>
</ul>


<!-- more -->


<p>I think these requirements are very normal and reasonable for thousands of users. BTW, you will find out that <a href="http://www.flickr.com">Flickr.com</a> matches most of them quite well, which may prove that Flickr is still the best image hosting and sharing service in the Internet.</p>

<p>Anyone suggestion?</p>

<p>If not, maybe I should write one and it will be an excellent beginning for some amazing startup right? Any good designers or programmers want to join?</p>

<p><strong>UPDATED:</strong> Used <a href="http://wordpress.org/">Wordpress</a> + <a href="http://wpshower.com/themes/imbalance-2/">Imbalance 2 Theme</a> as an intermediate solution. The problem is still there but my daughter can <a href="http://i.laimi.info/">have her work done</a> for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Brief Guide of (RESTful) SOA, Part I]]></title>
    <link href="http://paradigmx.net/blog/2012/04/27/a-brief-guide-of-restful-soa-part-i/"/>
    <updated>2012-04-27T16:53:00+08:00</updated>
    <id>http://paradigmx.net/blog/2012/04/27/a-brief-guide-of-restful-soa-part-i</id>
    <content type="html"><![CDATA[<p>Many say that <code>XML</code> <code>SOAP</code> <code>WS-\*</code> suck and SOA is over or becoming profit tool for big consultant companies. But I would say: SOA is <em>not</em> evil, IBM is. Look at these principles of SOA:</p>

<blockquote><p>- reuse, granularity, modularity, composability, componentization and interoperability.<br/>- standards-compliance (both common and industry-specific).<br/>- services identification and categorization, provisioning and delivery, and monitoring and tracking.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Service-oriented_architecture#Principles'>Service-oriented Architecture</a></cite></footer></blockquote>


<p>All these are perfect software architectural styles(well, except those words your spell checker complains), our best dream. These can&#8217;t be wrong. The problem is in the implementations. Fortunately the rises of RESTful services on the open web prove that the spirit of SOA can really matters. Maybe one day similar architecture and implementation will eventually change enterprise computing in return.</p>

<p>I always believe <strong>the service-oriented architecture will be the future of massive distributed software system</strong>. And <strong>RESTful services will replace web sites and eventually become the main body of the Internet</strong>. So I often think about how to help approaching it. I know that lots of people want to implement RESTful style services in their system (though they may not know what for). What they need is a brief and clean(maybe not extremely accurate and complete) guideline when practicing RESTful services. It can help to make things right and avoid traps such as using HTTP request as RPC protocol - it can be used as RPC protocol but it&#8217;s not RESTful and cannot provide key benefits which REST want to apply.</p>

<!-- more -->


<p><span class='pullquote-right' data-pullquote='&#8220;Try not to think of it in terms of right and wrong. She is a guide. She can help you to find the path.&#8221;'>
Here it is. Below I&#8217;ll list a brief guide which can help you find the path, as in the Matrix movies Morpheus told Neo about the Oracle: &#8220;Try not to think of it in terms of right and wrong. She is a guide. She can help you to find the path.&#8221;</p>

<p>Don&#8217;t get me wrong, I tried my best to keep it right and accurate, but it&#8217;s very complicated and cannot be completely covered and explained while keep it simple and readable. If you want more conceptual or technical details, I&#8217;ll leave you a bunch of references.</p>

<p>Even we have all these compromises this guide will still be too long for a single blog post, so I will divide it into 3 parts and complete them within a month or two.
</span></p>

<p><strong>NOTE:</strong> In this guide, <em>service oriented architecture</em> and <em>RESTful architecture style</em> are nearly the same concept. I will use the term <em>RESTful</em> from here on.</p>

<h2>Level I: Basic Definitions and Rules</h2>

<h3>1.1 Objectives</h3>

<p>First of all you should know the purpose, why your service should follow the RESTful style and what benefits you can get. So when you get some trouble making architectural decision you can use these high level objectives to test all options: which one is the best for these objective?</p>

<p><strong>Decoupled:</strong> Services are decoupled from each other and from service consumers. All services and service consumers can evolve independently. Service consumers can integrate different services more easily. For example, You can provide a good service interface and an ugly(but working) implementation, then improve the implementation before the service becoming very popular and requests crashing down your server.</p>

<p><strong>More scalable and flexible:</strong> Services can be more easily changed, scaling, tuning, refactoring. Even when business changes, the services can be more easily changed to match the new business while keep compatibility with old business(clients).</p>

<p><strong>Easier integration and mash-up:</strong> All services have uniform interfaces and similar behaviors. Clients to same service are exchangeable. Service integration, inter-op and mash-up are easier to implement.</p>

<h3>1.2 Core Principles</h3>

<p>RESTful style requires:</p>

<p><strong>A client-server model</strong> which provides better <em>separation of concerns</em>(SoC). The service provider(<em>server</em>) need not to know the user interfaces and HCIs while the service consumer(<em>client</em>) need not to know the data storage and infrastructure, which give far more opportunity for reusing and changing without pain.</p>

<p><strong>Stateless:</strong> No client state or context will be stored on server between requests. Each request should contain all information necessary for the server to service the request, and any session state should be held in the client.</p>

<p><strong>Cacheable:</strong> Clients can cache responses. Furthermore, server and client should have a protocol to define caching strategy: which response can be cached, for how long or till what happens, to prevent clients reusing inappropriate cached data.</p>

<p><strong>Layered:</strong> System is layered and no cross layer info exposures. Client cannot tell whether it is directly connecting to the service provider or some intermediate layer, giving the interface is the same.</p>

<p><strong>Uniform interface</strong> which makes server and client decoupled on implementation, enables each part to evolve independently. It&#8217;s the most practical part so we will discuss it separately below.</p>

<p>All these 5 rules are required. If a service violet any of them it cannot be called &#8216;RESTful&#8217; - and more important, cannot get the benefits which RESTful styles declare to provide. So understanding all of them is the most important pre-requisite.</p>

<h2>Level II: Define Your System</h2>

<p>Before defining the APIs you should define your system first. You can do it through 2 steps:</p>

<h3>2.1 Business Abstraction</h3>

<p>Business abstraction is <a href="http://paradigmx.net/blog/2011/12/24/back-end-is-hard/">very important but hard to routinize</a>. And it&#8217;s mostly beyond the realm which RESTful style can control. You should find the <em>essential</em> business concepts and make smart abstraction for high flexibility and extensibility. Yet we still can have some guideline. Probably will not solve the most difficult part of the problem but still give some help.</p>

<p><strong>Find business objects.</strong> When the system complete, every business objects exposed to the public will be presented as an URI. Clients can issue <code>POST</code> <code>GET</code> <code>PATCH/PUT</code> <code>DELETE</code> requests to the URI to <code>CRUD</code>(create/read/update/delete) correlated object. <em>So any objects you want to exposed to the public for clients to do the <code>CRUD</code> things you should make them in the business object model, as essential objects.</em></p>

<p><strong>Define the relations.</strong> Next step is to define the relations between objects. The classical entity-relation analysis methodology is very good at that. Find all <code>1-1</code> <code>1-*</code>  <code>*-*</code> etc. relations and make them clearly documented.</p>

<p><strong>The object graph.</strong> It&#8217;s optional but very useful. In most case build an <a href="http://en.wikipedia.org/wiki/Object_graph">object graph</a> at this stage will help to clarify many potential obscure concepts in the business object model. Try fill some real data in the object model and understand the order and constrains of each operation. Refine the object-relation model if necessary.</p>

<h3>2.2 Define Response Objects</h3>

<p>Now define some response data formats. Some may feel weird to do that in such early stage but trust me it&#8217;s the best path you can choose.</p>

<p>Firstly you should know that as highly recommended by RESTful style, the object and its <em>representation</em> are isolated. The same object can have many different <em>representations</em> which can be designated by the clients when issuing the request.</p>

<p>Second, do <em>NOT</em> try to invent your own <em>representation</em> type system, just use the well defined exist Internet media types(originally called MIME types), as defined in <a href="http://tools.ietf.org/html/rfc2046">RFC 2046</a>. Every system on the Internet have built-in support to it and all developers are familiar with <code>text/html</code> <code>application/json</code> <code>image/jpeg</code> <code>multipart/form-data</code> etc.</p>

<p>Now define the <em>core</em> response objects, in JSON format. Normally when clients request for a business object e.g. <code>GET /user/:uid</code> the service will return a <code>user</code> object in JSON format(<code>application/json</code>). JSON has become the most widely used cross platform data exchange format these days. You can provide support for responses in other media types such as <code>text/html</code> <code>application/pdf</code> later. And here are some best practices for that:</p>

<p><strong>Separate core attributes and other attributes.</strong> In most cases you should provide two versions of the same object type:</p>

<ul>
<li>The <em>compact</em> version which only contains the most frequently used core attributes of the object and very lightweight(for bandwidth and for parsing), which is often used embedded within other object or in arrays.</li>
<li>The <em>detailed</em> version which contains all fields in the <em>compact</em> version plus more detail info, such as attributes not so frequently used and other objects related to this object, which is often used for clients retrieving a single object.</li>
</ul>


<p>Below is a demo:
<img src="http://paradigmx.net/images/restful-soa-define-json-data.png"></p>

<p><strong>Use embedded object not the object id.</strong> Assuming you are working on a online comment system and you have objects <code>user</code> and <code>post</code>. In <code>post</code> object there is an attribute <code>author</code> pointing to a <code>user</code> object. You should embedded a <em>compact</em> version of <code>user</code> object in the <code>post</code> object instead of only the user id. As shown in the snippet below:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// BAD style</span>
</span><span class='line'><span class="nx">post</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">id</span><span class="o">:</span> <span class="mi">10010</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Hello&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">body</span><span class="o">:</span> <span class="s2">&quot;Hi there!&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">createdAt</span><span class="o">:</span> <span class="mi">1333250513</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">author</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GOOD style</span>
</span><span class='line'><span class="nx">post</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">id</span><span class="o">:</span> <span class="mi">10010</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Hello&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">body</span><span class="o">:</span> <span class="s2">&quot;Hi there!&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">createdAt</span><span class="o">:</span> <span class="mi">1333250513</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">author</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">nickName</span><span class="o">:</span> <span class="s2">&quot;soulhacker&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">avatar</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">status</span><span class="o">:</span> <span class="s2">&quot;Doing something matters&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">online</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In many cases this strategy will bring data redundancy but make client-side parsing and handling more convenient. Server-side implementation will be more structural and reusable as well.</p>

<p><strong>Normalize array representation</strong> so clients can parse them using one single handler. Below is return data of some user search API:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">users</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">total</span><span class="o">:</span> <span class="mi">126</span><span class="p">,</span> <span class="c1">// totally 126 users match this request</span>
</span><span class='line'>  <span class="nx">count</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="c1">// but we just return the first 10 records</span>
</span><span class='line'>  <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span> <span class="c1">// a compact user object inside </span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span> <span class="c1">// 9 more user objects here</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Client-side handling can be very simple and reusable. Snippet below shows how it goes in Ruby:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Utitlity methods</span>
</span><span class='line'><span class="k">def</span> <span class="nf">countFromJSONCollection</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># data is a JSON object return from JSON.parse(response)</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">data</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="n">data</span><span class="o">[</span><span class="s1">&#39;total&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">count</span> <span class="o">=</span> <span class="n">data</span><span class="o">[</span><span class="s1">&#39;count&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">Integer</span><span class="p">(</span><span class="n">total</span><span class="p">),</span> <span class="nb">Integer</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">itemsFromJSONCollection</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># c is a class with class method named fromJSON to init object</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="kp">nil</span> <span class="ow">or</span> <span class="n">data</span> <span class="o">==</span> <span class="kp">nil</span> <span class="ow">or</span> <span class="n">data</span><span class="o">[</span><span class="s1">&#39;items&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">count</span> <span class="o">=</span> <span class="n">data</span><span class="o">[</span><span class="s1">&#39;items&#39;</span><span class="o">].</span><span class="n">size</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">c</span><span class="o">.</span><span class="n">fromJSON</span><span class="p">(</span><span class="n">data</span><span class="o">[</span><span class="s1">&#39;items&#39;</span><span class="o">][</span><span class="n">i</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Collection</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:total</span><span class="p">,</span> <span class="ss">:count</span><span class="p">,</span> <span class="ss">:items</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">fromJSON</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">data</span> <span class="o">==</span> <span class="kp">nil</span> <span class="ow">or</span> <span class="n">c</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">coll</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">coll</span><span class="o">.</span><span class="n">total</span><span class="p">,</span> <span class="n">coll</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="n">countFromJSONCollection</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">coll</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="n">itemsFromJSONCollection</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">coll</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Explicitly mark all required and optional fields.</strong> Not all data are equally important. As part of the protocol service providers should let clients know exactly which ones are optional. But remember HTTP is not a reliable communication protocol and the network status is even more complicated in mobile Internet, clients should do all error-tolerant things even for those fields marked as required.</p>

<p><strong>To be continued&#8230;</strong></p>

<p>In the following parts we will talk about how to define the API specs and give general info about concerns in implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Soul Link]]></title>
    <link href="http://paradigmx.net/blog/2012/03/31/soul-link/"/>
    <updated>2012-03-31T16:56:00+08:00</updated>
    <id>http://paradigmx.net/blog/2012/03/31/soul-link</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://paradigmx.net/images/paper-by-fiftythree.jpg">
Apple AppStore&#8217;s biggest news this week is that, <a href="http://www.fiftythree.com/paper">FiftyThree&#8217;s Paper</a> became the <a href="http://itunes.apple.com/app/paper-by-fiftythree/id506003812?mt=8">iPad App of the Week</a> in just 2 days. I think that it&#8217;s far from coincidence.</p>

<p>I tried <em>Paper</em> for several hours. It offers no unique features. It&#8217;s much less powerful than <a href="http://itunes.apple.com/app/sketchbook-pro-for-ipad/id364253478?mt=8">AutoDesk&#8217;s SketchBook Pro</a>, a full-featured paint tool especially designed for the new iPad&#8217;s Retina Display which was showed off on Apple&#8217;s event. But I can predict that <em>Paper</em> will be much more popular. So why is it so special?</p>

<p>Watch their <a href="http://vimeo.com/37254322">official trailer</a> and you can get some clues. The trailer spreads several important ideas: 1. <em>Paper</em> can be used anytime anywhere whenever people want to use pen and paper. 2. The User, the iPad, <em>Paper</em> and the stylus work together as a whole. 3. All these are all about the user&#8217;s lifestyle, becoming part to it.</p>

<p>So what do you think while watching the video? Desire to light up your iPad at once and sketch something? Think about buying one <a href="http://wacom.com/en/Products/Bamboo/BambooStylus.aspx">Wacom Stylus</a> for your iPad? Or those <a href="http://www.youtube.com/watch?v=D2BvVcSkNkA">amazing</a> <a href="http://www.youtube.com/watch?v=9bYx3iEdzzc">ads</a> for the <a href="http://www.youtube.com/watch?v=btfbIVGES1I">original</a> <a href="http://www.youtube.com/watch?v=NMvETJ0bxEQ">iPad</a>? My answer is: all of them. And one more <del>thing</del> person, Don Draper.</p>

<!-- more -->


<p><img class="right" src="http://paradigmx.net/images/don-draper.gif">
In <em>Mad Men</em>&#8217;s season I finale, <em>The Wheel</em>, people from Eastman Kodak brought their new invention, a <a href="http://en.wikipedia.org/wiki/Carousel_slide_projector">slide projector</a> to Don Draper for a name and an ad campaign proposal. After a typical <a href="http://paradigmx.net/images/don-draper-inspiration.jpg"><em>Don&#8217;s inspiration routine</em></a> Don Draper dug up a vision from his childhood and proposed &#8217;<em>Carousel</em>&#8217; as the name of the projector, which made it a symbolic memento of everybody&#8217;s childhood. Don Drape explained this idea as below:</p>

<blockquote><p>&#8220;Technology is a glittering lure. But there&#8217;s the rare occasion when the public can be engaged on a level beyond flash, if they have a sentimental bond with the product.&#8221;</p><footer><strong>Don Draper</strong> <cite>From Mad Men Season I Episode 13 &#8220;the Wheel&#8221;</cite></footer></blockquote>


<p><img class="left" src="http://paradigmx.net/images/paper-in-action.jpg">
Functional features are the <em>essence</em> of a product. But most product features are not so specific nor unique for the users. Thus they cannot differentiate your product from similar ones (either from you or your competitors). You&#8217;d find a way to lure the users to use it, and you have to guide your users to the perfect moment to use it. Under specific scenarios or circumstances some of your design will make your product unique, any design that plants the strong idea into people&#8217;s mind, that your product is made just for them and for THAT moment. Finally users will become to <strong>depend</strong> on your product at such moments. That&#8217;s the <em>sentimental bond</em> as Don told us, and the <em>soul link</em> between product and people.</p>

<p>There is a popular fallacious point among product guys, thinking that the well polished UI is the soul of product, which can make people be deeply <em>touched</em>. It&#8217;s <strong>WRONG</strong>. People may be touched, but that&#8217;s not your product&#8217;s purpose and people won&#8217;t love products just because they are touching. Try ask yourself:</p>

<blockquote><p>After showing off your product to someone, can they intuitively understand what purpose and moments the product for, then remember your product and desire to have a try ASAP the right moment comes?</p></blockquote>


<p><img class="right" src="http://paradigmx.net/images/steve-jobs-and-iphone.jpg">
If not, they won&#8217;t be bonded to your product. Go get someone else or re-think your product and find the <em>soul link</em>. <em>Seal</em> the <em>link</em> on each of every steps which give birth to your product: <code>designing</code>, <code>building</code>, <code>integrating</code>, <code>presenting</code> and <code>promoting</code>.</p>

<p>It&#8217;s really simple rule. But in the history of technology very few people can make it. Steve Jobs is one perfect example and he had made Apple an organization talented to make products that way. I think that people in <a href="http://www.fiftythree.com/about">FiftyThree</a> also have such talents. <em>Paper</em> not only has strong soul link to people, but also to the iPad, Jobs&#8217; most favorite creation. I&#8217;m pretty sure that if Jobs were still alive, he would certainly love <em>Paper</em> and its creators, and invite them to join Apple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go for Android]]></title>
    <link href="http://paradigmx.net/blog/2012/02/05/go-for-android/"/>
    <updated>2012-02-05T19:42:00+08:00</updated>
    <id>http://paradigmx.net/blog/2012/02/05/go-for-android</id>
    <content type="html"><![CDATA[<p><a href="http://golang.org/">Go</a> is <em>the</em> language from Google and Android is <em>the</em> mobile OS from Google. The bond between them are just born with. So there should be no surprise that we can use Go to write Android programs, though some important restricts for now:</p>

<!-- more -->


<ul>
<li>There is no Android SDK for Go, so no system API nor GUI for Go program on Android.</li>
<li>Go doesn&#8217;t support JNI for now. So Go programs have to be compiled as separate executables, wrapped as assets in apk and called within Java based apps.</li>
<li>Maybe cross-compiling is really hard. We cannot build Android applications which use Cgo(C bridge for Go) on our desktop computer for now, as shown below.</li>
</ul>


<p>But it&#8217;s not just a toy because of the following advantages:</p>

<ul>
<li>Go is <em>fast</em> and all C programmers just like it.</li>
<li>Go language is bundled with high quality libraries, especially suitable for special tasks.</li>
<li>Go is from Google! It does have a future! Well, at least let&#8217;s hope so.</li>
</ul>


<p>Go is a very young language, thus there&#8217;s few guides or tutorials out there. But it also makes earlier investion provide more return. My friend and colleague <a href="https://twitter.com/#!/rarnu">@rarnu</a> also likes the idea of writing Android program using Go and has written <a href="http://blog.sina.com.cn/s/blog_68b671430100z4wn.html">a short tutorial</a>. I&#8217;d like to rewrite it here and fill all lost details which he was too lazy to include.</p>

<h3>Prerequisites</h3>

<ul>
<li>C Tools

<ul>
<li>GCC, C standard library, bison, GNU Make and Awk</li>
</ul>
</li>
<li><a href="http://mercurial.selenic.com/wiki/Download">Mercurial</a>

<ul>
<li><code>hg</code></li>
</ul>
</li>
<li><a href="http://developer.android.com/sdk/installing.html">Android SDK</a>

<ul>
<li><code>adb</code></li>
</ul>
</li>
</ul>


<h3>Preparing Go Language</h3>

<p>Firstly some environment variables need to be set (better be added to <code>.bashrc</code> or <code>.zshrc</code> etc.):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">GOROOT</span><span class="o">=</span><span class="s2">&quot;$HOME/Code/Go/Home&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GOBIN</span><span class="o">=</span><span class="s2">&quot;$GOROOT/bin&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$PATH:$GOBIN:&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>GOROOT</code> should be the folder where Go source is in and <code>GOBIN</code> should be in the system <code>PATH</code>. Double check them and issue these commands in terminal:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hg clone -u release https://go.googlecode.com/hg/ <span class="nv">$GOROOT</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$GOROOT</span>/src
</span><span class='line'><span class="nb">export </span><span class="nv">GOOS</span><span class="o">=</span>linux
</span><span class='line'><span class="nb">export </span><span class="nv">GOARCH</span><span class="o">=</span>arm
</span><span class='line'>./all.bash
</span></code></pre></td></tr></table></div></figure>


<p>Now check out <code>$GOBIN</code> folder, three commands <code>go</code> <code>godoc</code> <code>gofmt</code>(<code>go</code> command line tools) and a folder <code>linux_arm</code>(cross-compiling tools for Linux/ARM targets) should be in there. <strong>Line 2-5</strong> can be run multiple times by setting different <code>$GOOS</code> and <code>$GOARCH</code> combinations to support <code>amd64</code> <code>386</code> and <code>arm</code> instruction sets all in one install base. See &#8221;<a href="http://golang.org/doc/install/source">Installing Go from source</a>&#8221; for detail.</p>

<h3>Hello Android from Go!</h3>

<p>Now create Go source files for testing. Let&#8217;s start with the most favorite &#8216;Hello world!&#8217; one.</p>

<figure class='code'><figcaption><span>hello.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="p">(</span><span class="s">&quot;Hello Android from Go!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile it and generate executable:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">CGO_ENABLED</span><span class="o">=</span>0 <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>arm go build -o hello-arm hello.go
</span></code></pre></td></tr></table></div></figure>


<p>The last command will generate an executable named <code>hello-arm</code> which targets Linux/ARM system (i.e. Android). Now connect to an debuggable Android device and issue in the same folder:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb push hello-arm /data/local/
</span><span class='line'>adb shell
</span><span class='line'>/data/local/hello-arm
</span></code></pre></td></tr></table></div></figure>


<p>If all things go right it will generate output as expected. Using the same routine showed above, all code examples on <a href="http://golang.org/">Go&#8217;s homepage</a> can be verified working well on Android devices.</p>

<h3>Real World Example</h3>

<p>The following code example is borrowed from rarnu&#8217;s <a href="http://blog.sina.com.cn/s/blog_68b671430100z4wn.html">blog post</a> and modified a bit.</p>

<figure class='code'><figcaption><span>checkupdate.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span><span class="s">&quot;net/http&quot;</span><span class="p">;</span> <span class="s">&quot;flag&quot;</span><span class="p">;</span> <span class="s">&quot;os&quot;</span><span class="p">;</span> <span class="s">&quot;strconv&quot;</span><span class="p">;</span> <span class="s">&quot;encoding/json&quot;</span><span class="p">;</span> <span class="s">&quot;io/ioutil&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">flag</span><span class="p">.</span><span class="nx">Parse</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">NArg</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">.</span><span class="nx">WriteString</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">version</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">flag</span><span class="p">.</span><span class="nx">Arg</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;http://rarnu.7thgen.info/api/query_software_update.php&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">res</span><span class="p">.</span><span class="nx">StatusCode</span> <span class="o">!=</span> <span class="mi">200</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">.</span><span class="nx">WriteString</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">buf</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">f</span> <span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>    <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">m</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{});</span>
</span><span class='line'>    <span class="nx">v</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;lastver&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">sver</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">v</span><span class="p">.(</span><span class="kt">string</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">sver</span> <span class="p">&gt;</span> <span class="nx">version</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fn</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;url&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">.</span><span class="nx">WriteString</span><span class="p">(</span><span class="nx">fn</span><span class="p">.(</span><span class="kt">string</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">.</span><span class="nx">WriteString</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Handling JSON data returned from web services in Go is pretty neat and clean, right? Build it as above:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">CGO_ENABLED</span><span class="o">=</span>0 <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>arm go build -o cu-arm checkupdate.go
</span><span class='line'>adb push cu-arm /data/local/
</span><span class='line'>adb shell
</span><span class='line'>/data/local/cu-arm 20
</span></code></pre></td></tr></table></div></figure>


<p>When running it on my Galaxy Nexus (ARM v7 dual-core 1.2 GHz Cortex-A9, Android 4.0.2 with kernel 3.0.8) it crashed on <strong>line 14</strong> - the <code>http.Get</code> call failed. Because of some issues in the cross-compiling system, all calls using Cgo will cause failure like that, at least for now. Unfortunately the <code>net</code> package depend on Cgo and nearly all useful applications need <code>net</code> package.</p>

<h3>Call Go Code in Android Apps</h3>

<p>Exactly the same as calling any native executables in Android apps, which fully explained in <a href="http://gimite.net/en/index.php?Run%20native%20executable%20in%20Android%20App">this guide</a>. I&#8217;ll list a more general and accurate solution below for convenience.</p>

<p>The following Java class shows how to invoke a process in Android apps (actually it is used by Google itself), which is the base of the following guide:</p>

<figure class='code'><figcaption><span>CommandResult.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommandResult</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">error</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="nf">runCommand</span><span class="o">(</span><span class="n">String</span> <span class="n">command</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;runCommand&quot;</span><span class="o">,</span> <span class="n">command</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Process</span> <span class="n">process</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">DataOutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">DataInputStream</span> <span class="n">stdout</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">DataInputStream</span> <span class="n">stderr</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">CommandResult</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CommandResult</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">StringBuffer</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'>            <span class="n">StringBuffer</span> <span class="n">error</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">process</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&quot;su&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">os</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataOutputStream</span><span class="o">(</span><span class="n">process</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>
</span><span class='line'>                <span class="n">os</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="n">command</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">os</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="s">&quot;exit\n&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">os</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">process</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">command</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">stdout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataInputStream</span><span class="o">(</span><span class="n">process</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">stdout</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">output</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">stderr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataInputStream</span><span class="o">(</span><span class="n">process</span><span class="o">.</span><span class="na">getErrorStream</span><span class="o">());</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">stderr</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">error</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">process</span><span class="o">.</span><span class="na">waitFor</span><span class="o">();</span>
</span><span class='line'>            <span class="n">ret</span><span class="o">.</span><span class="na">result</span> <span class="o">=</span> <span class="n">output</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">();</span>
</span><span class='line'>            <span class="n">ret</span><span class="o">.</span><span class="na">error</span> <span class="o">=</span> <span class="n">error</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ret</span><span class="o">.</span><span class="na">result</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">ret</span><span class="o">.</span><span class="na">error</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">os</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">os</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">stdout</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">stdout</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">stderr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">stderr</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">process</span><span class="o">.</span><span class="na">destroy</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ret</span><span class="o">.</span><span class="na">result</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>                <span class="n">ret</span><span class="o">.</span><span class="na">error</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run a native executable (whether written in Go or not) in Android apps:</p>

<ul>
<li>Include the binary <code>go-exec</code> in the <code>assets</code> folder.</li>
<li>Use <code>getAssets().open("go-exec")</code> to get an <code>InputStream</code>.</li>
<li>Write it to <code>/data/data/app-package-name/</code>, where the app has access to write files and make it executable.</li>
<li>Make it executable using the code above, i.e. <code>CommandResult.runCommand("/system/bin/chmod 744 /data/data/app-package-name/go-exec", 0)</code></li>
<li>Run <code>/data/data/app-package-name/go-exec</code> using the code above.</li>
</ul>


<h3>Updates</h3>

<p><code>Go 1</code> is now live! Article updated to match changes in <code>Go 1</code>. And the <code>Go 1</code> <a href="http://golang.org/doc/go1.html">release note</a> is a must read.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing RestKit]]></title>
    <link href="http://paradigmx.net/blog/2012/01/31/introducing-restkit/"/>
    <updated>2012-01-31T18:59:00+08:00</updated>
    <id>http://paradigmx.net/blog/2012/01/31/introducing-restkit</id>
    <content type="html"><![CDATA[<p><a href="http://restkit.org/">RestKit</a> is an amazing <strong>Objective-C framework for iOS</strong> that aims to make interacting with RESTful web services simple, fast and fun. As said on its homepage:</p>

<blockquote><p>It combines a clean, simple HTTP request/response API with a powerful object mapping system that reduces the amount of code you need to write to get stuff done.</p></blockquote>


<!-- more -->


<p>RestKit provides several components:</p>

<ol>
<li><strong>An HTTP client component</strong> based on <code>NSURLConnection</code>. It&#8217;s not as feature-packed as ASIHTTPRequest<sup>[1]</sup>, but it does its part very well in most cases. It supports <code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code>, <code>SSL</code> &amp; <code>HTTP AUTH</code>, multi-part, etc. It even provides a request queue to manage the HTTP requests(mostly implicitly), making them more memory and bandwidth efficient.</li>
<li><strong>A powerful but elegant object mapping system</strong>, which uses idiomatic key-value coding mechanism to define and implement the round-trip transformation between <code>JSON</code> <sup>[2]</sup> string and native Objective-C class. Well, the magic behind it is called <a href="https://github.com/jverkoey/sockit">SOCKit</a> <sup>[3]</sup>.</li>
<li><strong>A persistent layer</strong> built on top of the object mapping system, fully integrated with CoreData. Can be used as app&#8217;s primary data storage or just local cache.</li>
<li><strong>Miscellaneous helpers</strong> for better life. Reachability, database seeding, API environments switching, etc.<br/>
<small><sup>[1]</sup> In fact ASIHTTPRequest has been <a href="http://allseeing-i.com/%5Brequest_release%5D">abandoned</a> since September 2011, and RestKit is one of replacements its author suggested.<br/>
<sup>[2]</sup> The JSON parsing layer is pluggable, default to <a href="https://github.com/johnezang/JSONKit">JSONKit</a>. And I haven&#8217;t mentioned the <em>old</em> XML, have I?<br/>
<sup>[3]</sup> Created by <a href="mailto:jverkoey@gmail.com">Jeff Verkoeyen</a>, the author of <a href="https://github.com/jverkoey/nimbus">Nimbus</a>, the highly improved successor of Facebook&#8217;s Three20.</small></li>
</ol>


<p>Other than making another almighty monster its creators focus on the remote-local object (can be transient or persistent through CoreData) mapping. They made it through the &#8217;<em>common things simple, others possible</em>&#8217; philosophy, which I always love.</p>

<p>RestKit has some <a href="https://github.com/RestKit/RestKit/wiki">documentations</a> but not very well organized. Maybe it&#8217;s the biggest problem for beginners. So I&#8217;d like to list below some most useful solution recipes I&#8217;ve used in real world project, updated progressively.</p>

<p><strong><strong><em>WARNING</em></strong></strong>: it will be incredibly long anyway.</p>

<h3>Setting up</h3>

<p>RestKit provides two ways to set up the RestKit client: <code>RKClient</code> and <code>RKObjectManager</code>. If you want to manually handle the return data you should use <code>RKClient</code>. Otherwise, if you want to use the RestKit object mapping system, then <code>RKObjectManager</code> is the one.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// API base (and the whole API environment) can be switched by</span>
</span><span class='line'><span class="cp">#define gkBaseURL @&quot;https:</span><span class="c1">//api.domain.com/v2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">RKObjectManager</span><span class="o">*</span> <span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">RKObjectManager</span> <span class="nl">objectManagerWithBaseURL:</span><span class="n">gkBaseURL</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;I am your RKObjectManager singleton : %@&quot;</span><span class="p">,</span> <span class="n">manager</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Or you can use</span>
</span><span class='line'><span class="n">RKClient</span> <span class="o">*</span><span class="n">client</span> <span class="o">=</span> <span class="p">[</span><span class="n">RKClient</span> <span class="nl">clientWithBaseURL:</span><span class="n">gkBaseURL</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;I am your RKClient singleton : %@&quot;</span><span class="p">,</span> <span class="n">client</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>RestKit uses a convenient convention: the first initialized client object becomes a singleton and can be referenced by <code>[RKClient sharedClient]</code> or <code>[RKObjectManager sharedManager]</code> correspondingly.</p>

<p>In real world we usually have more than one base URLs, say, one for product environment, the second for testing and third for developing. The base URL can be easily changed globally:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">RKClient</span> <span class="n">sharedClient</span><span class="p">]</span> <span class="nl">setBaseURL:</span><span class="s">@&quot;https://api.domain.com/v2d&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that change base URL while app is running may bring some side effects. See <a href="http://restkit.org/api/0.9/Classes/RKClient.html#//api/name/baseURL">the API document</a> for detail.</p>

<p><code>RKClient</code> acts just like a plain asynchronous HTTP client. You can send any HTTP request through its intuitive interface:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">User</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">RKRequestDelegate</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">User</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">send</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// HTTP GET</span>
</span><span class='line'>    <span class="p">[</span> <span class="p">[</span><span class="n">RKClient</span> <span class="n">sharedClient</span><span class="p">]</span> <span class="nl">get:</span><span class="s">@&quot;users/self&quot;</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// HTTP POST. Note the transparent NSDictionary conversion</span>
</span><span class='line'>    <span class="n">NSDictionary</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span>
</span><span class='line'>        <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="n">_userName</span><span class="p">,</span> <span class="s">@&quot;userName&quot;</span><span class="p">,</span>
</span><span class='line'>                                                   <span class="n">_password</span><span class="p">,</span> <span class="s">@&quot;password&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span> <span class="p">[</span><span class="n">RKClient</span> <span class="n">sharedClient</span><span class="p">]</span> <span class="nl">post:</span><span class="s">@&quot;users/login&quot;</span> <span class="nl">params:</span><span class="n">params</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// HTTP DELETE</span>
</span><span class='line'>    <span class="p">[</span> <span class="p">[</span><span class="n">RKClient</span> <span class="n">sharedClient</span><span class="p">]</span> <span class="nl">delete:</span><span class="s">@&quot;users/13&quot;</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The delegate handles the response data when its fully loaded</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">request:</span><span class="p">(</span><span class="n">RKRequest</span><span class="o">*</span><span class="p">)</span><span class="nv">request</span> <span class="nf">didLoadResponse:</span><span class="p">(</span><span class="n">RKResponse</span><span class="o">*</span><span class="p">)</span><span class="nv">response</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">request</span> <span class="n">isGET</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">response</span> <span class="n">isOK</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Data returned: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">response</span> <span class="n">bodyAsString</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">request</span> <span class="n">isPOST</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">response</span> <span class="n">isJSON</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;POST returned a JSON response&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">request</span> <span class="n">isDELETE</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">response</span> <span class="n">isNotFound</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Resource &#39;%@&#39; not exists&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">request</span> <span class="n">resourcePath</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using <code>RKObjectManager</code> you&#8217;ll map the web resources to local Objective-C objects, so you need not (and cannot) handle the return data explicitly. Instead you should handle data through the mapping system, which will be discussed below.</p>

<h3>Modeling and Mapping</h3>

<p>Now the object mapping system. Let&#8217;s start with the best practice in RESTful API backed mobile app development:</p>

<blockquote><p>1. Analyze the business and make abstraction.<br/>2. Design the RESTful API spec based on the first step, including all call endpoints, parameters and returning data in JSON format.<br/>3. Mapping the API spec to native code in designated mobile platform.</p></blockquote>


<p>Assuming we have a simple API named <code>users/login</code>, accepting POST request with 2 parameters: <code>username</code> and <code>password</code>, doing login check, and returning a encrypted access <code>token</code> and corresponding <code>user</code> object. And as a global convention we encapsulate the payload as <code>response</code> section in a JSON string which also contains a <code>meta</code> section for system level info such as status code and error message. So here it looks like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;meta&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;code&quot;</span><span class="o">:</span> <span class="mi">200</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;response&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;931240153764834717 156605143238420655&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;user&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;user_name&quot;</span><span class="o">:</span> <span class="s2">&quot;soulhacker&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;...&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s simple but not trivial, and very <em>representative</em>. What will the mapping work? Have a look at the code first:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma Mark - Class Meta</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Meta</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">code</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Meta</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">code</span> <span class="o">=</span> <span class="n">_code</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma Mark - Class User</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">User</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">userName</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Many stuff omitted here</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">User</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">userName</span> <span class="o">=</span> <span class="n">_userName</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Many stuff omitted here</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma Mark - Class UsersLogin</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">UsersLogin</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">)</span> <span class="n">Meta</span> <span class="o">*</span><span class="n">meta</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">token</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">)</span> <span class="n">User</span> <span class="o">*</span><span class="n">user</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UsersLogin</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">meta</span> <span class="o">=</span> <span class="n">_meta</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">token</span> <span class="o">=</span> <span class="n">_token</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">user</span> <span class="o">=</span> <span class="n">_user</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma Mark - Class UsersLoginRequest</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">UsersLoginRequest</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">RKObjectLoaderDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">userName</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UsersLoginRequest</span> <span class="o">*</span><span class="p">)</span><span class="nf">initWithUserName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">userName</span> <span class="nf">password:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">password</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">login</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UsersLoginRequest</span>
</span><span class='line'><span class="c1">// Even more stuff omitted here</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">login</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">RKObjectMapping</span> <span class="o">*</span><span class="n">metaMapping</span> <span class="o">=</span> <span class="p">[</span><span class="n">RKObjectMapping</span> <span class="nl">mappingForClass:</span><span class="p">[</span><span class="n">Meta</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">metaMapping</span> <span class="nl">mapAttributes:</span><span class="s">@&quot;code&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">RKObjectMapping</span> <span class="o">*</span><span class="n">userMapping</span> <span class="o">=</span> <span class="p">[</span><span class="n">RKObjectMapping</span> <span class="nl">mappingForClass:</span><span class="p">[</span><span class="n">User</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">userMapping</span> <span class="nl">mapKeyPath:</span><span class="s">@&quot;user_name&quot;</span> <span class="nl">toAttribute:</span><span class="s">@&quot;userName&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// More mapping for userMapping</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">RKObjectMapping</span> <span class="o">*</span><span class="n">mapping</span> <span class="o">=</span> <span class="p">[</span><span class="n">RKObjectMapping</span> <span class="nl">mappingForClass:</span><span class="p">[</span><span class="n">UsersLogin</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">mapping</span> <span class="nl">mapKeyPath:</span><span class="s">@&quot;response.token&quot;</span> <span class="nl">toAttribute:</span><span class="s">@&quot;token&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">mapping</span> <span class="nl">mapKeyPath:</span><span class="s">@&quot;meta&quot;</span> <span class="nl">toRelationship:</span><span class="s">@&quot;meta&quot;</span> <span class="nl">withMapping:</span><span class="n">metaMapping</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">mapping</span> <span class="nl">mapKeyPath:</span><span class="s">@&quot;user&quot;</span> <span class="nl">toRelationship:</span><span class="s">@&quot;user&quot;</span> <span class="nl">withMapping:</span><span class="n">userMapping</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Make the call</span>
</span><span class='line'>    <span class="n">NSDictionary</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="n">_userName</span><span class="p">,</span> <span class="s">@&quot;userName&quot;</span><span class="p">,</span> <span class="n">_password</span><span class="p">,</span> <span class="s">@&quot;password&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">endpoint</span> <span class="o">=</span> <span class="s">@&quot;users/login?&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">resourcePath</span> <span class="o">=</span> <span class="p">[</span><span class="n">endpoint</span> <span class="nl">stringByAppendingString:</span><span class="p">[</span><span class="n">params</span> <span class="n">queryString</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">RKObjectManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">loadObjectsAtResourcePath:</span><span class="n">resourcePath</span> <span class="nl">objectMapping:</span><span class="n">mapping</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma Mark - RKObjectLoaderDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">objectLoader:</span><span class="p">(</span><span class="n">RKObjectLoader</span> <span class="o">*</span><span class="p">)</span><span class="nv">objectLoader</span> <span class="nf">didLoadObjects:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">objects</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UsersLogin</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">objects</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Response code=%@, token=[%@], userName=[%@]&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">result</span> <span class="n">meta</span><span class="p">]</span> <span class="n">code</span><span class="p">],</span> <span class="p">[</span><span class="n">result</span> <span class="n">token</span><span class="p">],</span> <span class="p">[[</span><span class="n">result</span> <span class="n">user</span><span class="p">]</span> <span class="n">userName</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">objectLoader:</span><span class="p">(</span><span class="n">RKObjectLoader</span> <span class="o">*</span><span class="p">)</span><span class="nv">objectLoader</span> <span class="nf">didFailWithError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Line 1-35</strong>. Firstly we defined all needed model classes: fundamental ones first, ones that contain them next. Just follow the nature of the data structure within the API&#8217;s response data.<br/>
<strong>Line 51-56</strong>. Use instances of <code>RKObjectMapping</code> class to define object mappings. Simple mappings are self explained. Note that <code>RKObjectMapping</code> provides several different <code>mapXXX</code> methods to suit different use cases. The key path in mapping definition fully follows Cocoa&#8217;s key path style (also support <a href="http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/CollectionOperators.html">collection operators</a>). Check <a href="http://restkit.org/api/master/Classes/RKObjectManager.html">its document</a> and Apple&#8217;s <a href="http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/KeyValueCoding.html">Key Value Coding Guide</a> for detail.<br/>
<strong>Line 58-61</strong>. Complex object mappings are defined by <code>mapKeyPath:toRelationship:withMapping:</code> or similar methods. They map some key path to pre-defined object mappings. As seen in the code, the mapping to class <code>UsersLogin</code> contains simple mapping (<em>line 59</em>) and relationship mappings (<em>line 60-61</em>).<br/>
<strong>Line 64-67</strong>. <code>RKObjectManager</code> provides <code>loadObjectsAtResourcePath:objectMapping:delegate:</code> method to do these steps in order: combine resource path with the global <code>BaseURL</code> (configured within the <code>RKObjectManager</code> singleton), load resource from web services, parse return data, transform to local objects according to pre-defined <code>RKObjectMapping</code> instance, at last call the delegate to handle result.<br/>
<strong>Line 72-80</strong>. Delegate methods <code>didLoadObjects</code> and <code>didFailWithError</code> (<em>required</em>) are called after the object mapping process. Normally fetch the result object and do whatever you want.</p>

<h3>Routing</h3>

<p>The previous code list is neat except one part. Note <strong>line 64-66</strong>, in which we hard-code the API endpoint and parameters. In our <code>login</code> scenario it may not be a big problem, but for highly reused objects, repeatedly constructing <code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code> URLs by hand could be real pain in the ass. How about more object-oriented and more elegant way, just like the <a href="http://guides.rubyonrails.org/routing.html">routing system in Ruby on Rails</a>?</p>

<p>RestKit is most suitable for developers who has RoR background because of its <strong>Routing</strong> system which is highly alike to RoR&#8217;s, but built on Cocoa&#8217;s idiomatic key-value coding way. Here is the code sample:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// The router belongs to the object manager, just as mappers</span>
</span><span class='line'><span class="n">RKObjectRouter</span> <span class="o">*</span><span class="n">router</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RKObjectManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="n">router</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">router</span> <span class="nl">routeClass:</span><span class="p">[</span><span class="n">User</span> <span class="n">class</span><span class="p">]</span> <span class="nl">toResourcePath:</span><span class="s">@&quot;/users/:id&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">router</span> <span class="nl">routeClass:</span><span class="p">[</span><span class="n">User</span> <span class="n">class</span><span class="p">]</span> <span class="nl">toResourcePath:</span><span class="s">@&quot;/users&quot;</span> <span class="nl">forMethod:</span><span class="n">RKRequestMethodPOST</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Then we can call the GET POST PUT DELETE verbs directly from object manager</span>
</span><span class='line'><span class="n">User</span> <span class="o">*</span><span class="n">me</span> <span class="o">=</span> <span class="p">[[</span><span class="n">User</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">me</span><span class="p">.</span><span class="n">userName</span> <span class="o">=</span> <span class="s">@&quot;soulhacker&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[[</span><span class="n">RKObjectManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">postObject:</span><span class="n">me</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">User</span> <span class="o">*</span><span class="n">sb2nuke</span> <span class="o">=</span> <span class="p">[[</span><span class="n">User</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">sb2nuke</span><span class="p">.</span><span class="kt">id</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">13</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">RKObjectManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">deleteObject:</span><span class="n">sb2nuke</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Line 4</strong> set the <em>default</em> route of <code>User</code> class, which means when you call object manager&#8217;s <code>getObject</code> <code>postObject</code> <code>putObject</code> <code>deleteObject</code> methods the requests will go to <code>@"/users/:id"</code>. This is a colon coded endpoint and what is after the colon is the name of a <em>method</em> in the route class, whose return value will replace the colon part.<br/>
<strong>Line 5</strong> set a special route for <code>postObject</code> method, which will override the setting in default route.<br/>
<strong>Line 10</strong> requests <code>@"/users"</code> with HTTP <code>POST</code> method and RestKit will transform <code>me</code> object into post data form as the way defined in object mapper of class User.<br/>
<strong>Line 14</strong> first call <code>[sb2nuke id]</code> method to get the value and replace <code>:id</code> with it, then requests <code>@"/users/13"</code> with HTTP <code>DELETE</code> method, which (should) remove the user object with id 13 from the server.</p>

<p>So you see, RestKit provides very flexible tools for RESTful web services integration: you can use the network layer and do all data mapping by hand, or you can use the object mapping to do it completely within local object system, or you can tuning it in some intermediate way. No matter which solution you choose remember to align the protocol between the server and client side, and don&#8217;t forget to verify them to the Android platform if necessary (there is no RestKit over there for now -_-).</p>

<p>Thus we&#8217;ve completed the first part of this introduction guide. Below we will discuss some facilities bundled in RestKit to make our life better.</p>

<h3>The Request Queue</h3>

<p>Request queue is the most important support player under the hood. <code>RKRequestQueue</code> is behind nearly all network access within RestKit and provides elegant solution for critical memory and bandwidth problems. <code>RKRequestQueue</code> wraps memory management within RestKit framework so you&#8217;ll never see any <code>retain</code> <code>release</code> <code>autorelease</code> for <code>RKRequest</code> <code>RKResponse</code> instances. It let us developers focus on the business with very little concern about the memory management.</p>

<p><code>RKRequestQueue</code> also provides seamless integration with Reachability API (in iOS System Configuration framework), pooling all requests when network is unavailable, and limiting concurrent requests when network becomes reachable to prevent overburden as well.</p>

<p>All the amazing features described above are working without knowing, and maybe the only visible part of <code>RKRequestQueue</code> is its <em>request lifecycle management</em> feature, by which you can cancel ongoing requests to prevent wasting the bandwidth. This is a common situation in mobile apps that when some user action generates a bunch of network requests and the following action actually makes those requests useless (e.g. the view for previous action is dismissed by the later action). By using <code>RKRequestQueue</code> we can do it very easily by its <code>cancelRequest:</code> <code>cancelRequestsWithDelegate:</code> and  cancelAllRequests:` methods. And remember that whether and when to call them is fully determined by developers so you can choose the strategy wisely according to the different scenarios. Here is the simplest sample:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">RKClient</span> <span class="n">sharedClient</span><span class="p">]</span> <span class="nl">get:</span><span class="s">@&quot;users/self&quot;</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">RKRequestQueue</span> <span class="n">sharedQueue</span><span class="p">]</span> <span class="nl">cancelRequestsWithDelegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>cancelRequestsWithDelegate:</code> method cancel all requests that current controller is delegate for. If there are no one processing it&#8217;ll do nothing.</p>

<p>The last but not least. What <code>[RKRequestQueue sharedQueue]</code> returns is the default queue which created automatically when the RestKit client initialized. In most real world apps it&#8217;s not enough. For example we may need a queue to handle special resource intensive tasks in a background thread, such as data uploading/downloading, while the default queue keep working for  responding user actions. It&#8217;s easy:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">RKRequestQueue</span><span class="o">*</span> <span class="n">queue</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RKRequestQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">queue</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">queue</span><span class="p">.</span><span class="n">concurrentRequestsLimit</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">queue</span><span class="p">.</span><span class="n">showsNetworkActivityIndicatorWhenBusy</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Add some requests to it and make it start</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">addRequest:</span><span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="n">RKClient</span> <span class="n">sharedClient</span><span class="p">]</span> <span class="nl">requestWithResourcePath:</span><span class="s">@&quot;users/1&quot;</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">addRequest:</span><span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="n">RKClient</span> <span class="n">sharedClient</span><span class="p">]</span> <span class="nl">requestWithResourcePath:</span><span class="s">@&quot;users/2&quot;</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">addRequest:</span><span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="n">RKClient</span> <span class="n">sharedClient</span><span class="p">]</span> <span class="nl">requestWithResourcePath:</span><span class="s">@&quot;users/3&quot;</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="n">start</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Reachability</h3>

<p>Reachability is the problem all mobile apps have to face and of course iOS provides solution for that, well, sort of. The problem is: <code>SCNetworkReachability</code> (in <code>SystemConfiguration</code> framework) is implemented as low level C APIs and not so easy to use. Fortunately RestKit is bundled with a very straight-forward Objective-C wrapper for that, the <code>RKReachabilityObserver</code>.</p>

<p>When RKClient (or RKObjectManager) is initialized with some base URL, RestKit automatically initializes an instance of RKReachabilityObserver targeted at the host specified in the base URL and can be accessed via <code>baseURLReachabilityObserver</code> property. This observer also automatically registers <code>RKReachabilityStateChangedNotification</code> events in the default notification center. So in most cases we can use it in very simple way:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>            <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">reachabilityChanged:</span><span class="p">)</span>
</span><span class='line'>            <span class="nl">name:</span><span class="n">RKReachabilityStateChangedNotification</span>
</span><span class='line'>            <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reachabilityChanged:</span><span class="p">(</span><span class="n">NSNotification</span><span class="o">*</span><span class="p">)</span><span class="nv">notification</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">RKReachabilityObserver</span> <span class="o">*</span><span class="n">observer</span> <span class="o">=</span> <span class="p">(</span><span class="n">RKReachabilityObserver</span> <span class="o">*</span><span class="p">)[</span><span class="n">notification</span> <span class="n">object</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">observer</span> <span class="n">isNetworkAvailable</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;We&#39;re online!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">RKReachabilityReachableViaWiFi</span> <span class="o">==</span> <span class="p">[</span><span class="n">observer</span> <span class="n">networkStatus</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;…via WiFi.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">RKReachabilityReachableViaWWAN</span> <span class="o">==</span> <span class="p">[</span><span class="n">observer</span> <span class="n">networkStatus</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;…via mobile network.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">observer</span> <span class="n">isConnectionRequired</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Mobile network may be available if we open a connection...&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;We&#39;re offline!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Sending Multi-part Data</h3>

<p>Sending multi-part data through HTTP requests is very common requirement and incredibly difficult in most programming languages. RestKit uses <code>RKParams</code> and <code>RKParamsAttachment</code> to handle that problem. <code>RKParams</code> is the container that can hold any kinds of parameters. For simple data type it works just like a NSDictionary, and for multi-part data it can wrap <code>NSData</code> and/or <code>RKParamsAttachment</code> objects. Both <code>RKParams</code> and <code>RKParamsAttachment</code> are MIME type friendly. The following self-explained code sample shows all:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span><span class="o">*</span> <span class="n">filePath</span> <span class="o">=</span> <span class="s">@&quot;/path/to/avatar.jpg&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">RKParams</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="n">RKParams</span> <span class="n">params</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">params</span> <span class="nl">setValue:</span><span class="s">@&quot;Neo&quot;</span> <span class="nl">forParam:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">params</span> <span class="nl">setValue:</span><span class="s">@&quot;soulhacker@matrix.net&quot;</span> <span class="nl">forParam:</span><span class="s">@&quot;email&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">RKParamsAttachment</span><span class="o">*</span> <span class="n">attachment</span> <span class="o">=</span> <span class="p">[</span><span class="n">params</span> <span class="nl">setFile:</span><span class="n">filePath</span> <span class="nl">forParam:</span><span class="s">@&quot;avatar&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">attachment</span><span class="p">.</span><span class="n">MIMEType</span> <span class="o">=</span> <span class="s">@&quot;image/jpeg&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">attachment</span><span class="p">.</span><span class="n">fileName</span> <span class="o">=</span> <span class="s">@&quot;avatar.jpg&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIImage</span><span class="o">*</span> <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;wallpaper.png&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSData</span><span class="o">*</span> <span class="n">imageData</span> <span class="o">=</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">image</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">params</span> <span class="nl">setData:</span><span class="n">imageData</span> <span class="nl">MIMEType:</span><span class="s">@&quot;image/png&quot;</span> <span class="nl">forParam:</span><span class="s">@&quot;wallpaper&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;ContentType = %@, ContentLength = %@&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span><span class="n">params</span> <span class="n">HTTPHeaderValueForContentType</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="n">params</span> <span class="n">HTTPHeaderValueForContentLength</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Send a Request!</span>
</span><span class='line'><span class="p">[[</span><span class="n">RKClient</span> <span class="n">sharedClient</span><span class="p">]</span> <span class="nl">post:</span><span class="s">@&quot;/upload&quot;</span> <span class="nl">params:</span><span class="n">params</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Background Upload/Download</h3>

<p>iOS supported multi-tasking since 4.0 but it&#8217;s a highly restricted support and there are so many misconceptions among the users and even developers. I would strongly suggest Fraser Speirs&#8217; <a href="http://speirs.org/blog/2012/1/2/misconceptions-about-ios-multitasking.html">excellent blog</a> which explains all about iOS multi-tasking.</p>

<p>RestKit can seamlessly facilitate multi-tasking to prevent important long-time requests being interrupted by user switching out of the app. The key is the <code>backgroundPolicy</code> property of <code>RKRequest</code> which can be one of 4 enum values:</p>

<ul>
<li><code>RKRequestBackgroundPolicyNone</code>: the default value, do nothing for backgrounding;</li>
<li><code>RKRequestBackgroundPolicyCancel</code>: cancel the request when app switches to background;</li>
<li><code>RKRequestBackgroundPolicyContinue</code>: continue the request in background;</li>
<li><code>RKRequestBackgroundPolicyRequeue</code>: place the request back to the queue for next activation.</li>
</ul>


<p>So to make a request continue to work in background, just set its <code>backgroundPolicy</code> property as below:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">RKRequest</span><span class="o">*</span> <span class="n">request</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RKClient</span> <span class="n">sharedClient</span><span class="p">]</span> <span class="nl">post:</span><span class="s">@&quot;/upload&quot;</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="n">request</span><span class="p">.</span><span class="n">backgroundPolicy</span> <span class="o">=</span> <span class="n">RKRequestBackgroundPolicyContinue</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>RestKit is a clean and elegant solution for iOS app to interact with RESTful web services. It encapsulates many everyday work into a tiny yet powerful framework and extremely easy to use. Suggest every iOS developers to give it a try.</p>

<h3>References</h3>

<ul>
<li><a href="http://restkit.org/api/master/">RestKit References (master branch)</a></li>
<li><a href="https://github.com/RestKit/RestKit/wiki/Tutorial-%3A-Introduction-to-RestKit">Tutorial: Introduction to RestKit</a></li>
<li><a href="http://mobile.tutsplus.com/tutorials/iphone/advanced-restkit-development_iphone-sdk/">Advanced RestKit Development</a></li>
<li><a href="https://github.com/RestKit/RestKit/wiki/Solution-Recipes">RestKit Solution Recipes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back-end is Hard]]></title>
    <link href="http://paradigmx.net/blog/2011/12/24/back-end-is-hard/"/>
    <updated>2011-12-24T20:07:00+08:00</updated>
    <id>http://paradigmx.net/blog/2011/12/24/back-end-is-hard</id>
    <content type="html"><![CDATA[<p>Some of of my colleagues are talking about the difficulties of web front-end developing: the <a href="http://browsershots.org/">browser compatibility</a>, the <a href="https://twitter.com/soulhacker/status/145344139251286016">infuriatingly awful JavaScript language</a>, the pain when glueing DOM, CSS and JavaScript, and so on.</p>

<p>I agree that all these are a pain in the ass. But they are NOTHING compared to back-end architecture. During my over 10 years career as a software architect, I’ve seen significant improvements in nearly every parts of back-end architecture but it’s still very hard. The fundamental difficulties are still there, nearly unchanged all the time. Let me list some of the major ones.</p>

<!-- more -->


<ol>
<li><p><strong>Design for failure.</strong> Nearly half of the back-end code are not for ‘common’ situation. They are <a href="http://www.usenix.org/event/lisa07/tech/full_papers/hamilton/hamilton_html/">designed for failures</a>. They are designed for letting the system provide acceptable response under special or extreme conditions (and within specific budget): too many concurrent requests, the memory runs out, a new node is being hot-plugged in to the system, the load balancing device stops working, the long connection breaks every several minutes for no reason, etc. To maintain such functionality the design should contain many compromises: sync or async? Scale out or scale up? Realtime transaction or batch job? etc. All these tradeoffs cannot be determined through any simple rules and must be considered via all aspects of environment and requirements of a dynamic system. It nearly always leads to some kind of mistakes.</p></li>
<li><p><strong>Architecture is about abstraction.</strong> Why abstract? Because abstract concept/mechanism/pattern/methodology provide far more flexibility and reusability. The progress of abstraction distills the essence of the problem and wrap it as reusable component which can be used to solve similar problems in completely different system/context. Seems beautiful isn’t it? But unfortunately, abstraction is hard. More unfortunately, inappropriate abstraction is incredibly disastrous. And the most unfortunately, we have very few working methodology to do abstraction. Abstraction is a kind of art, remember? Mostly we begin with several general models, walk through a series of key rules and continually test our design for the lifetime of the system. Very experience based. In many cases when we find an architectural mistake it is too late. All we can do is to choose from the options between rebuilding the system from ground up or doing the yucky patchwork until we are exhausted.</p></li>
<li><p><strong>Architecture IS product.</strong> A software product contains many different point of views. Two of the most important are the end-user point of view and the architecture point of view. The end-user POV is like a black box, described by system input and output, can be (relatively) precisely defined and tested. The architecture POV is from inside the software system, the blueprint of the system as a whole, mainly describes each of every parts of the system and the connections between them. In most cases there is no direct link between these POVs. So those are very different POVs but they belong to the SAME product. They must be kept aligned and consistent. So the architect must deeply understand the soul of the product and the product designer must know the capability and limit of the architecture. Otherwise (i.e. the common situations), either the architecture has to be changed tremendously to meet some normal new product feature request, or after implementing a high cost product feature it appears that this feature can be replaced by another easy one which can bring the end-user nearly the same value and experience.</p></li>
</ol>


<p>Well, there are more but that’s enough. I consider all the above are the ‘essential difficulties’ as defined by Frederick Brooks in his epic <a href="http://www.cs.nott.ac.uk/~cah/G51ISS/Documents/NoSilverBullet.html"><em>No Silver Bullet</em></a>, which means no quick solver in the coming future.</p>

<p><strong>Back-end is hard. Q.E.D.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7-inch Success]]></title>
    <link href="http://paradigmx.net/blog/2011/12/03/7-inch-success/"/>
    <updated>2011-12-03T16:59:00+08:00</updated>
    <id>http://paradigmx.net/blog/2011/12/03/7-inch-success</id>
    <content type="html"><![CDATA[<p><img src="http://paradigmx.net/images/7-inch-success.jpg" title="Kindle Fire" alt="Kindle Fire" /></p>

<p>Kevin, my friend and colleague, just came back from USA, bringing a Kindle Fire with him. I tried it for an hour or two, and finally it confirms my earlier thought: this whole new Kindle, together with the strategy behind it, will gain its own success, and push the post-PC era, which is started by Apple, forward to a new stage.</p>

<!-- more -->


<p>The device feels overall very solid and comfortable, except it’s a bit heavier than I expected. But you cannot expect a full function 7-inch pad weighs as light as a 6-inch e-ink device, right? And it’s still 1/3 lighter than iPad 2. The 1024 x 600, 7″ display is clear and sharp, the reading experience is as good as on my old Kindle 3, except the weight again. Amazon Appstore provides many Android apps and games which can run smoothly on Kindle Fire, though not so many as Apple’s. The experience of apps are varied, generally OK. And especially, the Kindle Silk browser is just OK, providing no noticeable browsing speed improvement even at USA, as Kevin told me.</p>

<p>So it is just-another-failed-Android-pad? Absolutely no. We all have read a lot of good-but-not-so-great reviews about Kindle Fire (e.g. <a href="http://www.marco.org/2011/11/17/kindle-fire-review">this</a>, and <a href="http://online.wsj.com/article/SB10001424052970204190504577040110511886588.html">this</a>), but they are mostly originated from technical people. It’s 100 percent truth that the first edition of Kindle Fire is far from flawless, but the most important thing is that for a common user Kindle Fire is so easy to use, not only much simpler than all the available Android pads, even simpler than iPad. Kevin bought it a week ago, and his iPad 2′s usage dropped 80% after that. It’s easier to use and lighter to hold. We listed the best scenarios for Kindle Fire: video, music, gaming and reading. For these scenarios, Kindle Fire ‘just works’. What Kindle Fire is really lack of, compared to iPad, are high quality professional apps such as iWork, OmniGraffle, iTeleport, Prompt, Brushes and so on. But tell me how many times and how long have you used them, even if they stay in your iPad for a long long time.</p>

<p>Remember when Steve Jobs introduced iPad for the first time, he picked up some scenarios (looking photos, watching videos, handling emails, etc.) and told us iPad can do these things far better than a smartphone or a laptop computer. Pads are devices between handheld devices and laptop computers, they fit some scenarios and only fit them. Now Amazon goes even further, they just focus on a few of these scenarios, the requirements from all people, the entertainment requirements, and put them into a more compact, lighter and easier to use device. That’s Kindle Fire.</p>

<p>One big part of entertainment requirements is gaming. iPhone/iPod Touch/iPad are very good gaming platforms, and there are so many excellent games in Apple’s AppStore: addictive casual games, innovative games facilitated by the multi-touch control and movement sensors, popular console games’ special edition, and many others. They cover the most part of time people use iDevices. For now Amazon’s Appstore cannot compare to his rival, but Kindle Fire has already show the potential as a gaming platform. When you hold it in landscape mode, it just acts like a little bigger PSP, the feel is very cool (see the 3rd photo above).</p>

<p>As reported by <a href="http://techcrunch.com/2011/12/02/kindle-fire-3-9-million/">TechCrunch</a>, Amazon will ship 3.9 million Kindle Fires this holiday quarter. As comparison, Apple sold 3.3 million iPad in the September quarter of 2010 and 7.3 million in the holiday quarter last year. Remember Kindle Fire is in a completely different size and price space from iPad which leads to a market not so crowded. If We see some notable sales growth of Kindle Fire, there’ll be no surprise. A reasonable prediction is, Kindle Fire will highly likely be the leader of all Android pads and gain more attention from app and content providers, especially the ones provide high quality contents.</p>

<p>Here comes the real point. I think that even without all the apps and games and third party contents, Amazon still can make Kindle Fire an epic success. It’s Amazon Prime service. At its earlier years, Amazon Prime was just a customer service plan focused on better delivery, by which Amazon promises to deliver any goods you ordered to you within 2 days. Some may say that 360buy and 51buy do a lot better and they can deliver goods 3 times a day and make the time frame less than several hours. But Amazon Prime is for North American people. The physical distribution cost is pretty much higher and to fulfill the 2-day promise is not so easy. So the Amazon Prime becomes the most popular paid service in America. Now Amazon Prime is changing. It provides unlimited streaming of music, movies and TV shows, right to your Kindle Fire. With the launch of Kindle Fire Amazon also opened an online library which let Prime members ‘borrow’ any books in it without extra cost. What you can borrow is limited for now, but we can bet on its progressively expansion. Apart from Amazon Prime, Amazon Appstore also provides a special bonus for Kindle Fire user: everyday Amazon picks up a popular paid app and give it to all Kindle Fire user for free! Finally, Kindle Fire bundles with a one month trial of Prime service, wondering how many people can resist the temptation to go on.</p>

<p>Isn’t it amazing? I think it’s amazing, at least for people in America. Most of the advantages Amazon holds are limited in North America. I’m imagining some big guy in China cloning Amazon’s business patterns, but it’s not so easy, not so easy indeed. Amazon’s business patterns depend on mass contents, excellent service, and good device. They require very powerful IT infrastructure and operation to run. They need long time working and accumulation.</p>

<p><strong>The Epilogue</strong></p>

<p>Now the light is on, our world’s strongest two fighters have both entered the ring. They are both A-initiated(please ignore this bad joke). The champion, on the left, the most valuable tech company, the most popular tech brand all around the world, the flag of the Post-PC Era, exclusive skills include: Perfect Industrial Design, Ultimate User Experience Integration and Supply-chain Control plus Summon Infinite Cash Dragon, are preparing to prove that they can keep on moving from one victory to another even after his lifetime mentor passed away.</p>

<p>The challenger, on the right, the earliest and biggest e-commerce business, the best delivery and custom service provider in North America, bringing his powerful cloud infrastructure and uncountable contents, with his very powerful mentor who has the closest talents to the champion’s departed mentor, are chasing the champion’s weak point and looking for the chance to fulfill his own dream.</p>

<p><em>Ready? Fight!</em></p>
]]></content>
  </entry>
  
</feed>
