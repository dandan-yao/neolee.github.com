<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: FP | Paradigm X]]></title>
  <link href="http://soulhacker.me/blog/categories/fp/atom.xml" rel="self"/>
  <link href="http://soulhacker.me/"/>
  <updated>2015-01-19T20:24:46+08:00</updated>
  <id>http://soulhacker.me/</id>
  <author>
    <name><![CDATA[soulhacker]]></name>
    <email><![CDATA[neo@soulhacker.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Toolchain Reloaded]]></title>
    <link href="http://soulhacker.me/blog/2013/04/01/clojure-toolchain-reloaded/"/>
    <updated>2013-04-01T23:45:00+08:00</updated>
    <id>http://soulhacker.me/blog/2013/04/01/clojure-toolchain-reloaded</id>
    <content type="html"><![CDATA[<p><a href="http://clojure.org">Clojure</a> keeps <a href="http://wit.io/posts/clojure-all-grown-up">growning up</a>, and my 2.5-years old <a href="http://7thgen.info/blog/2010/12/clojure-for-mac-os-x/">guide for setting up Clojure environment on Mac OS X</a> had been out-of-date for quite a while. The toolchains based on <a href="https://github.com/technomancy/leiningen">Leiningen 2</a> and <a href="https://github.com/clojure/tools.nrepl">nREPL</a> rise from underground, become really powerful and easy (even joyful for most of us) to use, and de facto standard. Nearly all main stream developing environments provide solutions for serious Clojure developers: <a href="http://eclipse.org">Eclipse</a> + <a href="http://code.google.com/p/counterclockwise/">Counter Clockwise</a>, <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> + <a href="http://www.jetbrains.com/idea/">La Clojure</a>, <a href="http://www.sublimetext.com/2">Sublime Text 2</a> + <a href="http://github.com/wuub/SublimeREPL">SublimeREPL</a>, Vim with <a href="http://clojure-doc.org/articles/tutorials/vim_fireplace.html">fireplace.vim</a>, etc.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, and the favorite I finally found several months ago, <a href="https://github.com/overtone/emacs-live">Emacs Live</a>.</p>

<!-- more -->
<p><em>Emacs Live</em> is brought to us by <a href="https://github.com/samaaron">Sam Aaron</a>, a major developer of <a href="https://github.com/overtone/overtone/">Overtone</a>, the Clojure-based open source live-programmable music exploration &amp; collaboration toolkit<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. From <em>Emacs Live</em> documentation:</p>

<p><blockquote><p>Emacs Live is a carefully curated Emacs config which transforms vanilla Emacs from simply an incredible editor into an intense experience. The key is in the curation. Unlike other exemplary Emacs config tools such as the Starter Kit and Prelude which are very modular, Emacs Live embodies a holistic approach creating an all-round package. We build on the shoulders of giants and incorporate many independent projects, ensuring that they all work together seamlessly.</p><footer><strong>Emacs Live</strong> <cite><a href='http://overtone.github.com/emacs-live/'>A Curated Emacs Experience</a></cite></footer></blockquote></p>

<p><em>Emacs Live</em> emphasizes the <em>curation</em> of the whole bundle, providing great experiences for out-of-box usage. Some of the best features it packs include:</p>

<ul>
  <li>Solid configuration for fundamental Emacs usage, especially Paredit<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li>
  <li>Well picked and configured Clojure toolkit:
    <ul>
      <li>With Leiningen as the only dependency, without cluttered configuration files which normal IDEs usually introduce</li>
      <li>Built-in <a href="https://github.com/kingtim/nrepl.el">nREPL.el</a> for communicating with nREPL servers</li>
      <li>Clojure Mode with fancy (λ a) and ƒ(+ % 5) prettifications</li>
      <li>Auto completion support for both Clojure and nREPL buffer with inline documentation display (see it in action below)</li>
      <li>Fancy highlighting of sexps on eval; rainbow parens and delimiters</li>
    </ul>
  </li>
  <li>Amazing powerful features like: <a href="http://www.emacswiki.org/emacs/UndoTree">undo-tree</a>, Textmate-like snippets, <a href="http://www.emacswiki.org/emacs/quick-jump.el">quick jump</a> and <a href="http://www.emacswiki.org/emacs/AceJump">Ace Jump</a> mode</li>
</ul>

<p><img src="/images/emacs-live.png" title="My custom Emacs Live in working" ></p>

<p><em>Emacs Live</em> also provides modular customization mechanism called <em>packs</em>. As you can see in the above screenshot, I don’t like the font and color theme bundled with Emacs Live so I use my favorite <a href="http://www.fsd.it/fonts/pragmatapro.htm">Pragmata Pro coding font</a> and <a href="http://ethanschoonover.com/solarized">Solarized color theme</a>. For people who like a really powerful yet beautiful and elegant developing environment for Clojure, I’ll describe below how I set up all on Mac OS X in half an hour, step by step.</p>

<h2 id="pre-requisites">Pre-requisites</h2>

<p><strong>OS</strong>: Mac OS X 10.6 or above<br />
<strong>Java VM</strong>: Java SDK 6 or later
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>% uname -a
Darwin matrix.local 12.3.0 Darwin Kernel Version 12.3.0: Sun Jan  6 22:37:10 PST 2013; root:xnu-2050.22.13~1/RELEASE_X86&lt;em&gt;64 x86&lt;/em&gt;64
% java -version
java version “1.6.0&lt;em&gt;43”
Java(TM) SE Runtime Environment (build 1.6.0&lt;/em&gt;43-b01-447-11M4203)
Java HotSpot(TM) 64-Bit Server VM (build 20.14-b01-447, mixed mode)</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="emacs">Emacs</h3>

<p><em>Emacs Live</em> needs vanilla Emacs 24 or above. Which you can get in one of these methods:</p>

<ul>
  <li>Download pre-built universal binary from <a href="http://emacsformacosx.com">emacsformacosx.com</a>, mount the image and copy Emacs.app to <code>/Applications</code>.</li>
  <li>Use <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, the best package manager for OS X. It’s as simple as <code>brew install emacs --cocoa</code>.</li>
  <li>Download source from GNU Emacs site and build it:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>bzr branch http://bzr.savannah.gnu.org/r/emacs/trunk
cd trunk
./autogen.sh
./configure –with-ns
make bootstrap &amp;amp;&amp;amp; make install
mv nextstep/Emacs.app /Applications</pre></div>
</div>
 </figure></notextile></div></li>
</ul>

<h3 id="leiningen">Leiningen</h3>

<p><em>Leiningen is for automating Clojure projects without setting your hair on fire.</em></p>

<p><em>Emacs Live</em> depends on <em>Leiningen 2</em>. The best way to get <a href="https://github.com/technomancy/leiningen">Leiningen</a> on board is, again, to use <a href="http://mxcl.github.com/homebrew/">Homebrew</a> <code>brew install leiningen</code>.</p>

<p>Of course the <a href="https://github.com/technomancy/leiningen">official method</a> should work fine too:</p>

<ol>
  <li><a href="https://raw.github.com/technomancy/leiningen/stable/bin/lein">Download the script</a>.</li>
  <li>Place it on your $PATH e.g. <code>~/bin</code> or <code>/usr/local/bin</code></li>
  <li>Set it to be executable e.g. <code>chmod 755 ~/bin/lein</code> or <code>chmod 755 /usr/local/bin/lein</code></li>
</ol>

<p>Either way you can verify it by issuing<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>% lein -v
Leiningen 2.1.2 on Java 1.6.0_43 Java HotSpot(TM) 64-Bit Server VM</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="cleanup">Cleanup</h3>

<p>If you are already Emacs user, which means that most likely you already have an <code>.emacs</code> config file and lots of stuff in <code>.emacs.d</code> folder under your home <code>~/</code>. In this case before going any further you have to backup all of them for later use.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>mkdir -p ~/Desktop/Emacs.backup
mv ~/.emacs ~/.emacs.d ~/Desktop/Emacs.backup</pre></div>
</div>
 </figure></notextile></div></p>

<h2 id="emacs-live">Emacs Live</h2>

<p>There are several methods to install <em>Emacs Live</em>. But here is my favorite:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>cd ~/
git clone git://github.com/overtone/emacs-live.git ~/.emacs.d</pre></div>
</div>
 </figure></notextile></div></p>

<p>That’s it. Now you can try it by simply launching <code>Emacs.app</code> from your <code>/Applications</code> folder. You’d better not touch the <code>~/.emacs.d</code> folder from now on, so you can update <em>Emacs Live</em> anytime you want by issuing <code>git pull</code> in this folder.</p>

<p>All following steps are for more customization, and <em>optional</em>.</p>

<h2 id="emacs-live-customization">Emacs Live Customization</h2>

<h3 id="create-custom-user-pack">Create Custom User Pack</h3>
<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>mkdir ~/.live-packs
cp -R ~/.emacs.d/packs/template/user-template-pack ~/.live-packs/yourname-pack</pre></div>
</div>
 </figure></notextile></div></p>

<p>The folder name <code>yourname-pack</code> can be anything you’d like. Mine is <code>neo-pack</code> and you can have it as reference on <a href="https://github.com/neolee/neo-pack">GitHub</a>. </p>

<h3 id="user-pack-structure">User Pack Structure</h3>

<ul>
  <li><code>config</code>: Folder for Emacs config files. Typically a <code>bindings.el</code> for keybindings (which is already there), and a <code>yourname-conf.el</code> for your custom setting (which is not exist by default). I created a <code>config/neo-conf.el</code> and imported most of my settings from the old <code>~/.emacs</code> file, which you can find <a href="https://github.com/neolee/neo-pack/blob/master/config/neo-conf.el">here</a>.</li>
  <li><code>lib</code>: Folder for Emacs mods. Put stuffs from old <code>.emacs.d</code> folder into it and load them like this (in <code>init.el</code> or any scripts under <code>config</code> folder):
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>(live-add-pack-lib <span class="error">“</span>some-great-mod<span class="error">”</span>) <span class="comment">; some-great-mod is sub-folder under lib folder</span>
(<span class="keyword">require</span> <span class="error">‘</span>great-mod-init)            <span class="comment">; great-mod-init.el is script under sub-folder some-great-mod</span>
(great-mod)                          <span class="comment">; great-mod is some function in great-mod-init.el</span></pre></div>
</div>
 </figure></notextile></div></li>
  <li><code>init.el</code>: Entry script of the pack. Mostly something like:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>init.el </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="comment">;; Load bindings config</span>
(live-load-config-file <span class="error">“</span>bindings.el<span class="error">”</span>)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;<span class="comment">;; Custom settings</span>
(live-load-config-file <span class="error">“</span>yourname-conf.el<span class="error">”</span>)</pre></div>
</div>
 </figure></notextile></div>
- <code>info.el</code>: Meta data of the user pack.
- <code>README.md</code>: Helpful info for user pack customization.</p>

<h3 id="import-3rd-party-pack">Import 3rd Party Pack</h3>

<p>The built-in <code>cyberpunk</code> color theme bundled with <em>Emacs Live</em> is amazing, but I love the epic Solarized color theme all the time. Fortunately an <em>Emacs Live</em> user has made a <a href="https://github.com/siancu/solarized-pack">reusable pack</a> for it<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. Simply import it from GitHub:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>cd ~/.live-packs
git clone git://github.com/siancu/solarized-pack.git
cd solarized-pack
git submodule init
git submodule update</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="tell-emacs-to-load-user-packs">Tell Emacs to Load User Packs</h3>

<p><em>Emacs Live</em> uses <code>~/.emacs-live.el</code> to load user packs. So we need to create a <code>~/.emacs-live.el</code> file and put these lines in it:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>.emacs-live.el </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>(live-use-packs <span class="error">‘</span>(live/foundation-pack     <span class="comment">; Use live-use-packs to control which built-in packs should be loaded</span>
                  <span class="comment">; live/colour-pack       ; This built-in pack MUST be disabled if you want to use 3rd party color theme pack</span>
                  live/clojure-pack
                  live/lang-pack
                  live/power-pack))
(live-add-packs <span class="error">‘</span>(~/.live-packs/neo-pack   <span class="comment">; Use live-add-packs to load custom packs</span>
                  ~/.live-packs/solarized-pack))</pre></div>
</div>
 </figure></notextile></div></p>

<h2 id="final-tweaks">Final Tweaks</h2>

<h3 id="emacs-launching-time">Emacs Launching Time</h3>

<p><em>Emacs Live</em> is extremely powerful and thus cause rather long Emacs starting time as trade-off. Fortunately Emacs has standard solution for this problem: the Emacs daemon and <code>emacsclient</code>. Just add these aliases in your shell startup script (e.g. my <code>~/.zshrc</code>):
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>alias es=’/Applications/Emacs.app/Contents/MacOS/Emacs –daemon’
alias emacs=’/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -c -n’</pre></div>
</div>
 </figure></notextile></div>
Then you can firstly launch the Emacs server daemon by issuing <code>es</code> in shell (only once), after which you can instantly open Emacs editor by <code>emacs &lt;filename&gt;</code>.</p>

<h3 id="connecting-to-nrepl">Connecting to nREPL</h3>

<p><em>Emacs Live</em> provides <em>nREPL</em> integration through <code>nrepl.el</code>. To use that you can choose one of two ways.</p>

<h4 id="jacking-in">Jacking In</h4>

<p>The simplest way to get <em>Emacs Live</em> connected with a Clojure process is to use <code>M-x nrepl-jack-in</code> command. This allows you to connect to a specific <em>Leiningen</em> project which therefore ensures that all the project dependencies defined in the project’s <code>project.clj</code> are available on the JVM classpath.</p>

<p>In order to communicate with the correct project, you should summon <code>M-x nrepl-jack-in</code> whilst the active buffer displaying file which is part of the <em>Leiningen</em> project you wish to connect to. This will then spawn <code>lein repl :headless</code> as an external shell process and automatically connect to it.</p>

<h4 id="manually-connection">Manually Connection</h4>

<p>Another option for connecting to an <em>nREPL</em> process is to manually start a <em>Leiningen</em> REPL by <code>cd</code>ing to the project folder and issuing the command <code>lein repl</code>. This will start a REPL on the terminal, but also tell you which port <em>nREPL</em> is listening on i.e.:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>nREPL server started on port 62132</pre></div>
</div>
 </figure></notextile></div></p>

<p>Then use <code>M-x nrepl</code> command in Emacs and feed it with <code>127.0.0.1</code> (default) host and <em>right</em> port, which should have been printed in the shell output of <code>lein repl</code> command. In the case shown above the <em>right</em> port is 62132. Soon you will get annoyed by looking for this random port number and paste it to Emacs <code>M-x nrepl</code> prompt. Fortunately we can ask the nREPL server to listen to the default 4555 port by adding a custom <code>lein</code> command in <code>~/.lein/profiles.clj</code>:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>profiles.clj </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>{<span class="symbol">:live-repl</span> {<span class="symbol">:repl-options</span> {<span class="symbol">:port</span> <span class="integer">4555</span>}}
 <span class="symbol">:user</span> {<span class="symbol">:aliases</span> {<span class="error">“</span>live<span class="error">”</span> [<span class="error">“</span>with-profile<span class="error">”</span> <span class="error">“</span>default,live-repl<span class="error">”</span> <span class="error">“</span>repl<span class="error">”</span>]}
        <span class="symbol">:dependencies</span> [<span class="error">…</span>]}
 }</pre></div>
</div>
 </figure></notextile></div></p>

<p>Now you can issue <code>lein live</code> command under the project folder, which will start a normal <em>nREPL</em> session, but this time it will always be listening on port 4555. Connecting from Emacs is now just a matter of <code>M-x nrepl RET RET</code>.</p>

<h2 id="faq">FAQ</h2>

<p><em>Emacs Live</em> is being very actively developed and with relatively little <a href="http://overtone.github.com/emacs-live/documentation.html">documentation</a>. Here are some tricks I used in my pack, which may be updated from time to time.</p>

<p><strong>Q: Why is my custom color theme overrided by Emacs Live built-in theme?</strong> <br />
A: You have to disable the built-in <code>live/colour-pack</code> to use custom color theme, as shown in the <em>Tell Emacs to Load User Packs</em> section above.</p>

<p><strong>Q: How to use my favorite font instead of the default one?</strong> <br />
A: Modify <code>default-frame-alist</code> in <code>conf/yourname-conf.el</code> under your user pack (<code>~/.live-packs/yourname-pack</code>):
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>(add-to-list <span class="error">‘</span>default-frame-alist <span class="error">‘</span>(font <span class="keyword">.</span> <span class="error">“</span>PragmataPro <span class="integer">14</span><span class="error">”</span>))</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong>Q: How to customize my cursor color?</strong> <br />
A: Modify <code>default-frame-alist</code> in <code>conf/yourname-conf.el</code> under your user pack:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>(add-to-list <span class="error">‘</span>default-frame-alist <span class="error">‘</span>(cursor-color <span class="keyword">.</span> <span class="error">“</span>palegoldenrod<span class="error">”</span>))</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong>Q: I want the highlight current line feature back!</strong> <br />
A: After disabling the built-in <code>live/colour-pack</code> (see the first question above) you will lose the <em>highlight current line</em> feature as a side effect (since it’s defined in that pack). But it’s very easy to add it back, by adding the following line to <code>conf/yourname-conf.el</code> under your user pack:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>(global-hl-line-mode <span class="integer">1</span>)</pre></div>
</div>
 </figure></notextile></div></p>

<p>–</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>See the <a href="http://dev.clojure.org/display/doc/Getting+Started">Getting Started</a> guide in the official dev wiki for more. But note that many info in it are deprecated (e.g. Netbeans and Enclojure, Swank Clojure for Emacs, VimClojure, etc.).<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Overtone is extremely amazing and I highly suggest to have a try. Or you can see the <a href="http://vimeo.com/22798433">video</a> (Emacs Live in action!) to get some idea.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>IMHO, <a href="http://emacswiki.org/emacs/ParEdit">Paredit</a> is one of the key reasons which makes Emacs the best editor for all LISP dialects. See this <a href="http://www.slideshare.net/mudphone/paredit-preso">perfect guide</a> if not familiar with paredit.el.<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>If choosing the official method while running <code>lein -v</code> the first time it will download all dependencies for Leiningen, and then print out the version info.<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>Studying this simple user pack example can make building your own pack, especially color-theme pack as easily as Copy and Paste.<a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
